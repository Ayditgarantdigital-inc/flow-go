// Code generated by capnpc-go. DO NOT EDIT.

package captain

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Auth struct{ capnp.Struct }

// Auth_TypeID is the unique identifier for the type Auth.
const Auth_TypeID = 0xd8cdf7e707cbaf27

func NewAuth(s *capnp.Segment) (Auth, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Auth{st}, err
}

func NewRootAuth(s *capnp.Segment) (Auth, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Auth{st}, err
}

func ReadRootAuth(msg *capnp.Message) (Auth, error) {
	root, err := msg.RootPtr()
	return Auth{root.Struct()}, err
}

func (s Auth) String() string {
	str, _ := text.Marshal(0xd8cdf7e707cbaf27, s.Struct)
	return str
}

func (s Auth) NodeId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Auth) HasNodeId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Auth) SetNodeId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Auth_List is a list of Auth.
type Auth_List struct{ capnp.List }

// NewAuth creates a new list of Auth.
func NewAuth_List(s *capnp.Segment, sz int32) (Auth_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Auth_List{l}, err
}

func (s Auth_List) At(i int) Auth { return Auth{s.List.Struct(i)} }

func (s Auth_List) Set(i int, v Auth) error { return s.List.SetStruct(i, v.Struct) }

func (s Auth_List) String() string {
	str, _ := text.MarshalList(0xd8cdf7e707cbaf27, s.List)
	return str
}

// Auth_Promise is a wrapper for a Auth promised by a client call.
type Auth_Promise struct{ *capnp.Pipeline }

func (p Auth_Promise) Struct() (Auth, error) {
	s, err := p.Pipeline.Struct()
	return Auth{s}, err
}

type Ping struct{ capnp.Struct }

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0x8b3b5f400419ca82

func NewPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Ping{st}, err
}

func NewRootPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Ping{st}, err
}

func ReadRootPing(msg *capnp.Message) (Ping, error) {
	root, err := msg.RootPtr()
	return Ping{root.Struct()}, err
}

func (s Ping) String() string {
	str, _ := text.Marshal(0x8b3b5f400419ca82, s.Struct)
	return str
}

func (s Ping) Nonce() uint32 {
	return s.Struct.Uint32(0)
}

func (s Ping) SetNonce(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Ping_List is a list of Ping.
type Ping_List struct{ capnp.List }

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Ping_List{l}, err
}

func (s Ping_List) At(i int) Ping { return Ping{s.List.Struct(i)} }

func (s Ping_List) Set(i int, v Ping) error { return s.List.SetStruct(i, v.Struct) }

func (s Ping_List) String() string {
	str, _ := text.MarshalList(0x8b3b5f400419ca82, s.List)
	return str
}

// Ping_Promise is a wrapper for a Ping promised by a client call.
type Ping_Promise struct{ *capnp.Pipeline }

func (p Ping_Promise) Struct() (Ping, error) {
	s, err := p.Pipeline.Struct()
	return Ping{s}, err
}

type Pong struct{ capnp.Struct }

// Pong_TypeID is the unique identifier for the type Pong.
const Pong_TypeID = 0xc10601ff09f32611

func NewPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Pong{st}, err
}

func NewRootPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Pong{st}, err
}

func ReadRootPong(msg *capnp.Message) (Pong, error) {
	root, err := msg.RootPtr()
	return Pong{root.Struct()}, err
}

func (s Pong) String() string {
	str, _ := text.Marshal(0xc10601ff09f32611, s.Struct)
	return str
}

func (s Pong) Nonce() uint32 {
	return s.Struct.Uint32(0)
}

func (s Pong) SetNonce(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Pong_List is a list of Pong.
type Pong_List struct{ capnp.List }

// NewPong creates a new list of Pong.
func NewPong_List(s *capnp.Segment, sz int32) (Pong_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Pong_List{l}, err
}

func (s Pong_List) At(i int) Pong { return Pong{s.List.Struct(i)} }

func (s Pong_List) Set(i int, v Pong) error { return s.List.SetStruct(i, v.Struct) }

func (s Pong_List) String() string {
	str, _ := text.MarshalList(0xc10601ff09f32611, s.List)
	return str
}

// Pong_Promise is a wrapper for a Pong promised by a client call.
type Pong_Promise struct{ *capnp.Pipeline }

func (p Pong_Promise) Struct() (Pong, error) {
	s, err := p.Pipeline.Struct()
	return Pong{s}, err
}

type Announce struct{ capnp.Struct }

// Announce_TypeID is the unique identifier for the type Announce.
const Announce_TypeID = 0xda6b658bc18baf1d

func NewAnnounce(s *capnp.Segment) (Announce, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Announce{st}, err
}

func NewRootAnnounce(s *capnp.Segment) (Announce, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Announce{st}, err
}

func ReadRootAnnounce(msg *capnp.Message) (Announce, error) {
	root, err := msg.RootPtr()
	return Announce{root.Struct()}, err
}

func (s Announce) String() string {
	str, _ := text.Marshal(0xda6b658bc18baf1d, s.Struct)
	return str
}

func (s Announce) EngineId() uint8 {
	return s.Struct.Uint8(0)
}

func (s Announce) SetEngineId(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Announce) EventId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Announce) HasEventId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Announce) SetEventId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Announce_List is a list of Announce.
type Announce_List struct{ capnp.List }

// NewAnnounce creates a new list of Announce.
func NewAnnounce_List(s *capnp.Segment, sz int32) (Announce_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Announce_List{l}, err
}

func (s Announce_List) At(i int) Announce { return Announce{s.List.Struct(i)} }

func (s Announce_List) Set(i int, v Announce) error { return s.List.SetStruct(i, v.Struct) }

func (s Announce_List) String() string {
	str, _ := text.MarshalList(0xda6b658bc18baf1d, s.List)
	return str
}

// Announce_Promise is a wrapper for a Announce promised by a client call.
type Announce_Promise struct{ *capnp.Pipeline }

func (p Announce_Promise) Struct() (Announce, error) {
	s, err := p.Pipeline.Struct()
	return Announce{s}, err
}

type Request struct{ capnp.Struct }

// Request_TypeID is the unique identifier for the type Request.
const Request_TypeID = 0xe526bff04d4ce1e9

func NewRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func NewRootRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func ReadRootRequest(msg *capnp.Message) (Request, error) {
	root, err := msg.RootPtr()
	return Request{root.Struct()}, err
}

func (s Request) String() string {
	str, _ := text.Marshal(0xe526bff04d4ce1e9, s.Struct)
	return str
}

func (s Request) EngineId() uint8 {
	return s.Struct.Uint8(0)
}

func (s Request) SetEngineId(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Request) EventId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Request) HasEventId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetEventId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Request_List is a list of Request.
type Request_List struct{ capnp.List }

// NewRequest creates a new list of Request.
func NewRequest_List(s *capnp.Segment, sz int32) (Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Request_List{l}, err
}

func (s Request_List) At(i int) Request { return Request{s.List.Struct(i)} }

func (s Request_List) Set(i int, v Request) error { return s.List.SetStruct(i, v.Struct) }

func (s Request_List) String() string {
	str, _ := text.MarshalList(0xe526bff04d4ce1e9, s.List)
	return str
}

// Request_Promise is a wrapper for a Request promised by a client call.
type Request_Promise struct{ *capnp.Pipeline }

func (p Request_Promise) Struct() (Request, error) {
	s, err := p.Pipeline.Struct()
	return Request{s}, err
}

type Response struct{ capnp.Struct }

// Response_TypeID is the unique identifier for the type Response.
const Response_TypeID = 0xe06f2535c7dfe01b

func NewResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Response{st}, err
}

func NewRootResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Response{st}, err
}

func ReadRootResponse(msg *capnp.Message) (Response, error) {
	root, err := msg.RootPtr()
	return Response{root.Struct()}, err
}

func (s Response) String() string {
	str, _ := text.Marshal(0xe06f2535c7dfe01b, s.Struct)
	return str
}

func (s Response) EngineId() uint8 {
	return s.Struct.Uint8(0)
}

func (s Response) SetEngineId(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Response) EventId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Response) HasEventId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetEventId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Response) OriginId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Response) HasOriginId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Response) SetOriginId(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Response) TargetIds() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.DataList{List: p.List()}, err
}

func (s Response) HasTargetIds() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Response) SetTargetIds(v capnp.DataList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewTargetIds sets the targetIds field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Response) NewTargetIds(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Response) Payload() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Response) HasPayload() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Response) SetPayload(v []byte) error {
	return s.Struct.SetData(3, v)
}

// Response_List is a list of Response.
type Response_List struct{ capnp.List }

// NewResponse creates a new list of Response.
func NewResponse_List(s *capnp.Segment, sz int32) (Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Response_List{l}, err
}

func (s Response_List) At(i int) Response { return Response{s.List.Struct(i)} }

func (s Response_List) Set(i int, v Response) error { return s.List.SetStruct(i, v.Struct) }

func (s Response_List) String() string {
	str, _ := text.MarshalList(0xe06f2535c7dfe01b, s.List)
	return str
}

// Response_Promise is a wrapper for a Response promised by a client call.
type Response_Promise struct{ *capnp.Pipeline }

func (p Response_Promise) Struct() (Response, error) {
	s, err := p.Pipeline.Struct()
	return Response{s}, err
}

const schema_f71cc0af2f870b3c = "x\xda\xac\x90Ok\x13A\x18\x87\xdf\xdf\xcc\xe6\x8fH" +
	"*\xd3]\xd0\xa2!\xa7V#\xd6\x98VA\xaa\xd0\xea" +
	"-\xa2\x90)x\xf0$\xcbfH\x97\xd6\xd95\xbb\xab" +
	"\x08JU(V\xe2A\xc1\x8f\xe0E\x10\xe27\xd0\x9e" +
	"\x04\xc5\xbbx\xb1=\x88x\x10,\x1ez\x92\x95\xd9b" +
	"[B\xa19\xf4\xfa\xee\xf3>\xcf\xbbsf\x1c3\xac" +
	"\x9e;\xcc\x88\xe4\x91\\>}\xfcq\xc4\x9a\xb9y\xa1" +
	"K\xb2\x0c\xa4\x17\x0f>\xa9\xf5\xde\x1f\xdb \xab@T" +
	"_\x1f\x86\x0d\x14\x88\xc4\xdfiB*\xc6\xfe\x1cH\x91" +
	"_\xd9\x05\x9d,c\x18\xf6\xb8a\xed*\x0c|\xbc\xf7" +
	"\xa9\xf0c\xe3\xf3\x17\x12\xe5\x1dl\xce\x10\x93\x0d\x03\xdf" +
	"\xc8\xe0\xeb\x19\\\xeeuW\xbaj\xfek\x9fy\x93N" +
	"0\x01{)\xa3\x1f\xe1.!=\xba\xfa\xed\xc3\xb9\xd1" +
	"`\xb5\x9f\xce\x0eY3\xf4z\xb6\xf8\x0b\x15\x10\xd2\x9f" +
	"kW\xaf\xfd~7\xf6}W\xf9\x08?\x09\xbb\xca\x8d" +
	"|\x94\x1by\xe4\xcd\xa9[n\xcd\xe3n\x18\xbb\xbe\xae" +
	"\xc5\x1d\xdf\x9b_P\xa7=7\xd4\xe1T\xd3\xd7h7" +
	"\x01iq\x8b\xc8\x02\x91(M\x10\xc9\"\x87t\x18*" +
	":\xd0\x9eB\x91\x18\x8a{\xbb\x82\xfds]Jb\xcc" +
	"\xf5\xb9\xa6\xb6]\xd3:h\xa9F\x0b%b(\xed-" +
	"\xd3\xba\x12$\xdaSFX\xdc\x12V\xaf\x10\xc9\x13\x1c" +
	"\xf2,\x03\xe0\xc0\xcc\xea\x97\x89\xe4)\x0ey\x9e!U" +
	"\xba\xedk\xd5h\x11\x11\xf2\xc4\x90',\xaa;J\xc7" +
	"\x03\x97gUT\x09\x03\x1deeg\xab\xfc\xc0\x94\xef" +
	"s\xc8\xe5\xed\xf2\x92)?\xe4\x90\xcf\x18\x04\x83\x03F" +
	"$\x9e\x1ap\x99C\xbed\x10\x9c9\xe0D\xe2\xc5," +
	"\x91|\xce!\xdf0\x08\x8b;\xb0\x88\xc4k\xb3\xfe\x8a" +
	"C\xbe\x1d\xf0\xf0\xa0\xe3\xb7}\xbd\xc9\xfc\x9f\xc5n\xa7" +
	"\xad\xe2F\x8b\x10a\x88\xd0\xe4\xc8>\x0d\x11\x16C\xf7" +
	"\xdeB\xe0\x0e\xfe\xdf\xb7\x0f%*\x8a\xf7\xff\xc1\xff\x05" +
	"\x00\x00\xff\xff\xb1\xc2\xe8\xfe"

func init() {
	schemas.Register(schema_f71cc0af2f870b3c,
		0x8b3b5f400419ca82,
		0xc10601ff09f32611,
		0xd8cdf7e707cbaf27,
		0xda6b658bc18baf1d,
		0xe06f2535c7dfe01b,
		0xe526bff04d4ce1e9)
}
