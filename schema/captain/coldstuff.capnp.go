// Code generated by capnpc-go. DO NOT EDIT.

package captain

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type BlockProposal struct{ capnp.Struct }

// BlockProposal_TypeID is the unique identifier for the type BlockProposal.
const BlockProposal_TypeID = 0x9c6b5c46ecb4a72e

func NewBlockProposal(s *capnp.Segment) (BlockProposal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockProposal{st}, err
}

func NewRootBlockProposal(s *capnp.Segment) (BlockProposal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockProposal{st}, err
}

func ReadRootBlockProposal(msg *capnp.Message) (BlockProposal, error) {
	root, err := msg.RootPtr()
	return BlockProposal{root.Struct()}, err
}

func (s BlockProposal) String() string {
	str, _ := text.Marshal(0x9c6b5c46ecb4a72e, s.Struct)
	return str
}

func (s BlockProposal) Block() (Block, error) {
	p, err := s.Struct.Ptr(0)
	return Block{Struct: p.Struct()}, err
}

func (s BlockProposal) HasBlock() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockProposal) SetBlock(v Block) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s BlockProposal) NewBlock() (Block, error) {
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// BlockProposal_List is a list of BlockProposal.
type BlockProposal_List struct{ capnp.List }

// NewBlockProposal creates a new list of BlockProposal.
func NewBlockProposal_List(s *capnp.Segment, sz int32) (BlockProposal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return BlockProposal_List{l}, err
}

func (s BlockProposal_List) At(i int) BlockProposal { return BlockProposal{s.List.Struct(i)} }

func (s BlockProposal_List) Set(i int, v BlockProposal) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockProposal_List) String() string {
	str, _ := text.MarshalList(0x9c6b5c46ecb4a72e, s.List)
	return str
}

// BlockProposal_Promise is a wrapper for a BlockProposal promised by a client call.
type BlockProposal_Promise struct{ *capnp.Pipeline }

func (p BlockProposal_Promise) Struct() (BlockProposal, error) {
	s, err := p.Pipeline.Struct()
	return BlockProposal{s}, err
}

func (p BlockProposal_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type BlockVote struct{ capnp.Struct }

// BlockVote_TypeID is the unique identifier for the type BlockVote.
const BlockVote_TypeID = 0x90ad957dba1800a4

func NewBlockVote(s *capnp.Segment) (BlockVote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockVote{st}, err
}

func NewRootBlockVote(s *capnp.Segment) (BlockVote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockVote{st}, err
}

func ReadRootBlockVote(msg *capnp.Message) (BlockVote, error) {
	root, err := msg.RootPtr()
	return BlockVote{root.Struct()}, err
}

func (s BlockVote) String() string {
	str, _ := text.Marshal(0x90ad957dba1800a4, s.Struct)
	return str
}

func (s BlockVote) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockVote) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockVote) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// BlockVote_List is a list of BlockVote.
type BlockVote_List struct{ capnp.List }

// NewBlockVote creates a new list of BlockVote.
func NewBlockVote_List(s *capnp.Segment, sz int32) (BlockVote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return BlockVote_List{l}, err
}

func (s BlockVote_List) At(i int) BlockVote { return BlockVote{s.List.Struct(i)} }

func (s BlockVote_List) Set(i int, v BlockVote) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockVote_List) String() string {
	str, _ := text.MarshalList(0x90ad957dba1800a4, s.List)
	return str
}

// BlockVote_Promise is a wrapper for a BlockVote promised by a client call.
type BlockVote_Promise struct{ *capnp.Pipeline }

func (p BlockVote_Promise) Struct() (BlockVote, error) {
	s, err := p.Pipeline.Struct()
	return BlockVote{s}, err
}

type BlockCommit struct{ capnp.Struct }

// BlockCommit_TypeID is the unique identifier for the type BlockCommit.
const BlockCommit_TypeID = 0xa50191d15439269b

func NewBlockCommit(s *capnp.Segment) (BlockCommit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockCommit{st}, err
}

func NewRootBlockCommit(s *capnp.Segment) (BlockCommit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockCommit{st}, err
}

func ReadRootBlockCommit(msg *capnp.Message) (BlockCommit, error) {
	root, err := msg.RootPtr()
	return BlockCommit{root.Struct()}, err
}

func (s BlockCommit) String() string {
	str, _ := text.Marshal(0xa50191d15439269b, s.Struct)
	return str
}

func (s BlockCommit) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockCommit) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockCommit) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// BlockCommit_List is a list of BlockCommit.
type BlockCommit_List struct{ capnp.List }

// NewBlockCommit creates a new list of BlockCommit.
func NewBlockCommit_List(s *capnp.Segment, sz int32) (BlockCommit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return BlockCommit_List{l}, err
}

func (s BlockCommit_List) At(i int) BlockCommit { return BlockCommit{s.List.Struct(i)} }

func (s BlockCommit_List) Set(i int, v BlockCommit) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockCommit_List) String() string {
	str, _ := text.MarshalList(0xa50191d15439269b, s.List)
	return str
}

// BlockCommit_Promise is a wrapper for a BlockCommit promised by a client call.
type BlockCommit_Promise struct{ *capnp.Pipeline }

func (p BlockCommit_Promise) Struct() (BlockCommit, error) {
	s, err := p.Pipeline.Struct()
	return BlockCommit{s}, err
}

const schema_ca03600dec38188d = "x\xda2\xb0ft`2d\x9d\xce\xce\xc0\x10\x18\xc1" +
	"\xca\xf6w\x89\xc4\xae\xda\xa9k'\x08\xca3\xfe\xef\x95" +
	"\xb0x\xc3\x9b\xc0|\x8a\x81\x95\x91\x9d\x81\xc1x#\xb3" +
	"\x17\xa3\xf0Qfv\x06\x06\xe1\x83\xcc\xf6\x0c\x8c\xff\xf5" +
	"\x96oy\xe3\x16\x93=\x87\x01\x8b\xe2\x87\xccY\x8c\xc2" +
	"_\xc1\x8a?\x82\x15\xcfV\xb3\x0c\xb98\x91q)6" +
	"\xc5\x82,Q\x8c\xc2\xaa, \xc5\x8a,\xf6\x0c\x97\xfe" +
	"\x17'g\xa4\xe6&\xea'\xb3$\x16\x94$f\xe6\xe9" +
	"'\xe7\xe7\xa4\x14\x97\x94\xa6\xa5\xe9%'\x16\xe4\x15X" +
	"9\xe5\xe4'g\x87\xe5\x97\xa420\x0402\x06\xb2" +
	"0\xb300\xb0020\x08\xf2j10\x04r0" +
	"3\x06\x8a01\xf2g$\x16g0\xf2201\xf2" +
	"20\x12gd@Q~\x01\x7f~qb\x0e\x9a\xa9" +
	"F\x08S\xe5\x93@\x0a\x19\x05\xfe\x7f\xfd\xdd<\xf7\x7f" +
	"\x82\xcc&\x06\x06FF\x01b-p\xce\xcf\xcde\xce" +
	",!\xd2\xd1\x80\x00\x00\x00\xff\xff\xed\x82k\xe2"

func init() {
	schemas.Register(schema_ca03600dec38188d,
		0x90ad957dba1800a4,
		0x9c6b5c46ecb4a72e,
		0xa50191d15439269b)
}
