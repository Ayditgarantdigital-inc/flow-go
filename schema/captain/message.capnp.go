// Code generated by capnpc-go. DO NOT EDIT.

package captain

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Message struct{ capnp.Struct }
type Message_Which uint16

const (
	Message_Which_auth                Message_Which = 0
	Message_Which_ping                Message_Which = 1
	Message_Which_pong                Message_Which = 2
	Message_Which_announce            Message_Which = 3
	Message_Which_request             Message_Which = 4
	Message_Which_response            Message_Which = 5
	Message_Which_collectionGuarantee Message_Which = 6
	Message_Which_blockProposal       Message_Which = 7
	Message_Which_blockVote           Message_Which = 8
	Message_Which_blockCommit         Message_Which = 9
)

func (w Message_Which) String() string {
	const s = "authpingpongannouncerequestresponsecollectionGuaranteeblockProposalblockVoteblockCommit"
	switch w {
	case Message_Which_auth:
		return s[0:4]
	case Message_Which_ping:
		return s[4:8]
	case Message_Which_pong:
		return s[8:12]
	case Message_Which_announce:
		return s[12:20]
	case Message_Which_request:
		return s[20:27]
	case Message_Which_response:
		return s[27:35]
	case Message_Which_collectionGuarantee:
		return s[35:54]
	case Message_Which_blockProposal:
		return s[54:67]
	case Message_Which_blockVote:
		return s[67:76]
	case Message_Which_blockCommit:
		return s[76:87]

	}
	return "Message_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xaf7a8da44e30bf62

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xaf7a8da44e30bf62, s.Struct)
	return str
}

func (s Message) Which() Message_Which {
	return Message_Which(s.Struct.Uint16(0))
}
func (s Message) Auth() (Auth, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != auth")
	}
	p, err := s.Struct.Ptr(0)
	return Auth{Struct: p.Struct()}, err
}

func (s Message) HasAuth() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetAuth(v Auth) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAuth sets the auth field to a newly
// allocated Auth struct, preferring placement in s's segment.
func (s Message) NewAuth() (Auth, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAuth(s.Struct.Segment())
	if err != nil {
		return Auth{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Ping() (Ping, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != ping")
	}
	p, err := s.Struct.Ptr(0)
	return Ping{Struct: p.Struct()}, err
}

func (s Message) HasPing() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetPing(v Ping) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPing sets the ping field to a newly
// allocated Ping struct, preferring placement in s's segment.
func (s Message) NewPing() (Ping, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPing(s.Struct.Segment())
	if err != nil {
		return Ping{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Pong() (Pong, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != pong")
	}
	p, err := s.Struct.Ptr(0)
	return Pong{Struct: p.Struct()}, err
}

func (s Message) HasPong() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetPong(v Pong) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPong sets the pong field to a newly
// allocated Pong struct, preferring placement in s's segment.
func (s Message) NewPong() (Pong, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewPong(s.Struct.Segment())
	if err != nil {
		return Pong{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Announce() (Announce, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != announce")
	}
	p, err := s.Struct.Ptr(0)
	return Announce{Struct: p.Struct()}, err
}

func (s Message) HasAnnounce() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetAnnounce(v Announce) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAnnounce sets the announce field to a newly
// allocated Announce struct, preferring placement in s's segment.
func (s Message) NewAnnounce() (Announce, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewAnnounce(s.Struct.Segment())
	if err != nil {
		return Announce{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Request() (Request, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return Request{Struct: p.Struct()}, err
}

func (s Message) HasRequest() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetRequest(v Request) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Request struct, preferring placement in s's segment.
func (s Message) NewRequest() (Request, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewRequest(s.Struct.Segment())
	if err != nil {
		return Request{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Response() (Response, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != response")
	}
	p, err := s.Struct.Ptr(0)
	return Response{Struct: p.Struct()}, err
}

func (s Message) HasResponse() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetResponse(v Response) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Response struct, preferring placement in s's segment.
func (s Message) NewResponse() (Response, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewResponse(s.Struct.Segment())
	if err != nil {
		return Response{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) CollectionGuarantee() (CollectionGuarantee, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != collectionGuarantee")
	}
	p, err := s.Struct.Ptr(0)
	return CollectionGuarantee{Struct: p.Struct()}, err
}

func (s Message) HasCollectionGuarantee() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetCollectionGuarantee(v CollectionGuarantee) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCollectionGuarantee sets the collectionGuarantee field to a newly
// allocated CollectionGuarantee struct, preferring placement in s's segment.
func (s Message) NewCollectionGuarantee() (CollectionGuarantee, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewCollectionGuarantee(s.Struct.Segment())
	if err != nil {
		return CollectionGuarantee{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) BlockProposal() (BlockProposal, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != blockProposal")
	}
	p, err := s.Struct.Ptr(0)
	return BlockProposal{Struct: p.Struct()}, err
}

func (s Message) HasBlockProposal() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetBlockProposal(v BlockProposal) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockProposal sets the blockProposal field to a newly
// allocated BlockProposal struct, preferring placement in s's segment.
func (s Message) NewBlockProposal() (BlockProposal, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewBlockProposal(s.Struct.Segment())
	if err != nil {
		return BlockProposal{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) BlockVote() (BlockVote, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != blockVote")
	}
	p, err := s.Struct.Ptr(0)
	return BlockVote{Struct: p.Struct()}, err
}

func (s Message) HasBlockVote() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetBlockVote(v BlockVote) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockVote sets the blockVote field to a newly
// allocated BlockVote struct, preferring placement in s's segment.
func (s Message) NewBlockVote() (BlockVote, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewBlockVote(s.Struct.Segment())
	if err != nil {
		return BlockVote{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) BlockCommit() (BlockCommit, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != blockCommit")
	}
	p, err := s.Struct.Ptr(0)
	return BlockCommit{Struct: p.Struct()}, err
}

func (s Message) HasBlockCommit() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetBlockCommit(v BlockCommit) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockCommit sets the blockCommit field to a newly
// allocated BlockCommit struct, preferring placement in s's segment.
func (s Message) NewBlockCommit() (BlockCommit, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewBlockCommit(s.Struct.Segment())
	if err != nil {
		return BlockCommit{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xaf7a8da44e30bf62, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

func (p Message_Promise) Auth() Auth_Promise {
	return Auth_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Ping() Ping_Promise {
	return Ping_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Pong() Pong_Promise {
	return Pong_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Announce() Announce_Promise {
	return Announce_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Request() Request_Promise {
	return Request_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Response() Response_Promise {
	return Response_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) CollectionGuarantee() CollectionGuarantee_Promise {
	return CollectionGuarantee_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) BlockProposal() BlockProposal_Promise {
	return BlockProposal_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) BlockVote() BlockVote_Promise {
	return BlockVote_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) BlockCommit() BlockCommit_Promise {
	return BlockCommit_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_cc8ede639915bf22 = "x\xdaT\xce?h\x13o\x1c\xc7\xf1\xcf\xe7r\xc95" +
	"?Zz\xe1\xae\xd0\x1fR\xda\x8a\x8dZJk\xc1\xe2" +
	"\x7f\x08jU\xc4J\xe2\x89\x93P.\xc7C\x1b\x92\xdc" +
	"\x9d\xb9\xcb\"\x88\xe0\x1a\x14\x1d:\x88\x9d\xa4\xe2$\x19" +
	"tr\x09\x1dD\xf0\xcf\xe0&\x0eZ\x07\x15\xc1A\x10" +
	"\xacV\xeb#OHD\xc7\xe7\xf3\xfa\xbe\xe11\xef\xe7" +
	"\xb4Lr\x1e(\xe8\xc9\x94,\xb6v\x9d^\xb9z\xb1" +
	"\x89\xc2\x10)\xb7\xb6\x06nz\xaf\xaf=\xc3,\x8d\xff" +
	"\x80\xe9\x81qf\xc6\x0c`zt\x8f\x06\xca\xc8[\x14" +
	"Uw\xcaK\xb8a\xec\x96\xfc\xa9\xaa\x88\"wAL" +
	"zn\xe8\x87\xfb\xe7D\xd4\xaf\x9ey\xb2\xb0#\xa1\xf7" +
	"J\xa9\x13\xb0\xd2\x1c\x07\x1c\x9d\x09:&5\xf6\xf1\x97" +
	"\xb4\xa9\xa0\xaf\x0d=\x0al\x05\xda\xa6\xb4\xa9\x01V\xa6" +
	"\x0d\xbd\x0a\x06\x15$~J\x9b\x09\xc0\x1a\xe0I\xc0\xb1" +
	"\x15\x8c(\xd0\x7fH\x9b:`\x0d\xf10\xe0\x0c*\xd8" +
	"\xa6 \xb9!m&\x01k\xb4]\x8c(\x98P\x90\xfa" +
	".m\xa6\x00k'o\x03\xce\x84\x82\xbd\x0a\x8co\xd2" +
	"\xa6\x01X3\xac\x01\xcen\x059\x05=\xeb\xd2f\x0f" +
	"`\x1d\xe2\x19\xc09\xa8\xe0\x84\x82\xf4Wi3\x0dX" +
	"\xb3,\x02\xceQ\x05yj\xecw\xeb\xf1\"M\xb9\xbd" +
	"\xf9\xd4\xf8\xb0\xfe\xfc%@\x9a`\x7fX\xf2\x17h\xca" +
	"+O\xfe\xd7s\xf3\x07\x1a\x7f\xe6\xa0=g\xb2_\xd2" +
	"\x92\xa9\xd5\xce,]\xdf\x0f\xea\xbe'\x00\xd0\x94C\xcd" +
	"\xc6jC\x94_u\xf4rM\\\xa8\x8b(\xa6)?" +
	"\xbe=5\xf7\xb9\x95}\xd7\xedj\"\x0a\x03?\xeat" +
	"[\xd6\xde<\x9e\x19\x0b\xd6\xba\xea\x05\x95\x8a\xf0\xe2\x12" +
	"\x03\xffx\xdd\xad\xb9\xbe\x11\x0bAS\x8e-\xbd\xdf(" +
	"\x0f/?\xea\xde\x15+\x81W\xce\xd7\x02\x0c\x87A\xe4" +
	"Vh\xca\xc9\xbb\x0f>\x1d;_^\xfe\xe7\xe2\\\x10" +
	"\x83\x82\xe6\xe6\xca\xe0\xc3KK\xf7\xae\xffmG\x82*" +
	"\x8cjI\xfd\xf1Vv\xdf\xd9\x177x\xa7\xd3\xfe\x0e" +
	"\x00\x00\xff\xffy-\xa0\xdc"

func init() {
	schemas.Register(schema_cc8ede639915bf22,
		0xaf7a8da44e30bf62)
}
