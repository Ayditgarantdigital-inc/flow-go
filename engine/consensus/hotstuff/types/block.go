package types

import (
	"time"

	"github.com/dapperlabs/flow-go/model/flow"
)

type Block struct {
	// specified
	BlockID     flow.Identifier
	View        uint64
	QC          *QuorumCertificate
	PayloadHash []byte

	// configed
	Height  uint64
	ChainID string

	// autogenerated
	Timestamp time.Time
}

func NewBlock(blockID flow.Identifier, view uint64, qc *QuorumCertificate, payloadHash []byte, height uint64, chainID string) *Block {

	t := time.Now()

	return &Block{
		BlockID:     blockID,
		View:        view,
		QC:          qc,
		PayloadHash: payloadHash,
		Height:      height,
		ChainID:     chainID,
		Timestamp:   t,
	}
}

func (b *Block) ToVote() *UnsignedVote {
	panic("")
}

// BlockFromFlowHeader converts a flow header to the corresponding internal
// HotStuff block.
// header - the block header to convert from.
// aggSig - the aggregated signature that contains the identities of all the signers.
// it is looked up by the chain compliance layer
func BlockFromFlowHeader(header *flow.Header, aggSig *flow.AggregatedSignature) *Block {
	return &Block{
		View: header.View,
		QC: &QuorumCertificate{
			View:                header.ParentView,
			BlockID:             header.ParentID,
			AggregatedSignature: header.ParentSig,
		},
		PayloadHash: header.PayloadHash[:],
		Height:      header.Number,
		ChainID:     header.ChainID,
		Timestamp:   header.Timestamp,
	}
}
