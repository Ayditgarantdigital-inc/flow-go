// Code generated by go-bindata. DO NOT EDIT.
// sources:
// engine/execution/state/bootstrap/contracts/FeeContract.cdc (1.89kB)
// engine/execution/state/bootstrap/contracts/FlowToken.cdc (7.475kB)
// engine/execution/state/bootstrap/contracts/FungibleToken.cdc (7.083kB)
// engine/execution/state/bootstrap/contracts/ServiceAccount.cdc (1.973kB)

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsFeecontractCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xcf\x6f\x9c\x3a\x10\xbe\xf3\x57\xcc\xe5\x49\x10\x65\xe1\x1d\x9e\xde\x21\xdd\x54\x55\x93\xac\xd4\x5b\x55\xa5\xb9\xcf\x9a\x21\xb8\x05\x1b\xd9\x66\xc9\x36\xca\xff\x5e\xf9\x17\xe0\x84\xaa\xed\x5e\xbc\x30\xf3\xcd\xaf\xef\x1b\x5c\x5d\x5c\x64\xd9\x81\x08\x6e\xa4\x30\x0a\x99\xc9\xb2\xfb\x96\x6b\x60\xe1\x11\x06\x25\x4f\xbc\x26\x0d\x08\x27\x1c\x3b\x03\x53\x4b\x8a\xc0\xc8\xef\x24\x34\xa0\x22\x60\xb2\xeb\x88\x19\xaa\x01\xad\x57\x43\x74\x09\x68\xc0\xb4\x04\x24\xea\x4c\x36\x40\x83\x64\xad\x7d\x71\x76\x80\xe3\xa8\x04\xd5\x70\x3c\x3b\x1f\xac\x7b\x2e\x00\x19\x93\xa3\x30\x65\x96\x5d\x54\x59\xc6\xfb\x41\x2a\x03\x87\x51\x3c\xf2\x63\x47\xf7\x36\x19\x34\x4a\xf6\xf0\xef\xd3\x3f\x7a\x36\x77\x72\x7a\x6d\xca\x86\xf1\xb8\x14\x7f\x20\x8a\x7d\xc1\x73\x96\x01\x00\x54\x15\xdc\x9d\x48\xd8\xfa\xd0\x00\xd7\x40\x3d\x37\xb6\xf8\xa9\x25\xe1\x0a\x9a\xd1\x2d\x6a\xe0\x82\x1b\x8e\x1d\xff\x41\xb5\x83\xdb\xf0\xe4\xf0\xab\xd8\x9f\x16\xa7\xbc\xf8\xa3\x34\xcb\xf4\x6a\x1a\xa4\xe6\xd6\x62\x24\x20\x3c\xd8\x19\xbf\xcd\x74\x1b\xbd\x72\xec\xed\x9c\xae\xe0\xeb\x81\x3f\xfd\xff\xdf\xdf\x67\xd3\x46\xc9\xf3\x56\x33\x6e\x92\xfa\xa3\xe3\xe6\x97\x59\x3e\x2b\x7e\x42\x43\x5e\x0a\x97\x30\x71\xd3\xda\x28\x1d\x67\xb1\x11\x68\x46\xc1\x0c\x97\x22\x40\xdc\x81\x8c\x91\xd6\xb9\xa6\xae\x29\xe0\x84\xca\xe3\xaf\xe0\x43\xc2\x70\xe9\x9b\x8f\xb9\x42\xc0\x75\x9c\x70\xd8\xba\x9b\x51\x44\x8f\xdc\xd2\xbf\x1d\xac\x80\x67\x87\xb0\xbf\x8e\x0c\x1c\xb1\x43\xc1\x08\xae\x9d\x64\xca\xf0\x38\xbb\xd8\x02\x4b\x57\x5b\x99\xc6\xde\xef\x1c\xa0\x98\x3d\xed\x80\xb7\x89\x09\x31\xbd\xeb\xcb\xdc\x8d\x1b\xac\x4a\x9b\x81\x2f\xa4\xe5\xa8\x18\x81\x3c\x7e\x23\x16\xe8\x4b\x16\x42\x03\x43\x01\xad\xec\x9c\x3e\xec\xe6\x04\x3a\xcb\xd7\x03\x51\x31\x96\xcf\x14\xf5\x1e\x32\x59\xa4\x67\x78\xf5\x76\xed\x70\x4b\x86\x54\xcf\x05\x69\xb7\x04\x71\x50\xb2\x71\x8f\xf6\x0b\xf1\xe0\x39\xd7\x13\x0e\x3a\x7d\xe9\x75\x80\x62\x1d\x8f\xfa\xc1\x9c\x23\x26\xc8\xee\x35\x0c\x45\xed\x06\xa9\x01\x45\x10\xa2\x8b\x64\x5a\x4a\x6a\x0f\xb5\xb8\xe9\x4c\xa8\x17\x15\x97\x5b\xcd\x44\x75\x2c\x2d\xe7\x45\x54\xf2\x4a\x0e\x51\x12\x9e\x37\xb8\x5e\x2f\x74\xd0\x40\x94\x47\x82\xb1\xf2\x75\xcd\xf9\x1e\xf6\xbb\xe5\x3b\x54\x32\x45\x68\xe8\x6e\xb6\xe6\x45\x02\x7d\x93\x01\xf6\xbb\xf7\xab\x60\x89\x73\x68\x72\x6d\x4e\xec\x51\x81\x9b\x7b\xeb\xcf\x34\xbb\x22\x63\xe5\xe3\x4d\xb3\x25\x28\x34\x1c\xf6\x73\x97\xaf\x97\xa6\xaa\xe0\xc6\x35\xe5\xa8\x5b\x68\xd3\x78\x22\xe0\x06\xb8\x00\x6d\xa4\xc2\x47\xda\xa2\x62\xd9\xa7\xdf\xce\x29\x5d\x53\x2f\xe1\xfd\x0e\xbc\x67\xd0\x74\x5e\xbc\x4b\x43\xc7\x5b\xc3\x56\x93\xef\x77\x1e\x76\x09\x46\x5e\x41\x15\xca\xaa\x1a\x22\x8f\x2e\x92\x85\xb8\xb3\xe3\x9b\x65\xe7\xa4\xa5\x5b\x39\x69\xff\x37\xb9\x07\xa6\x8d\x7b\x60\xcd\xc0\xf6\x35\xe0\xa7\xfa\x92\xfd\x0c\x00\x00\xff\xff\x16\x1c\x39\xed\x62\x07\x00\x00")

func contractsFeecontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsFeecontractCdc,
		"contracts/FeeContract.cdc",
	)
}

func contractsFeecontractCdc() (*asset, error) {
	bytes, err := contractsFeecontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/FeeContract.cdc", size: 1890, mode: os.FileMode(420), modTime: time.Unix(1590085958, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x30, 0x3a, 0x63, 0x23, 0x19, 0xc6, 0x4c, 0x4e, 0x0, 0xa3, 0xe, 0x13, 0x8d, 0xdb, 0x29, 0x20, 0x9a, 0xe9, 0x94, 0xd1, 0x16, 0x1f, 0x3a, 0x11, 0x57, 0x1f, 0xf1, 0x86, 0x8b, 0xd7, 0x93, 0x65}}
	return a, nil
}

var _contractsFlowtokenCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x5f\x73\x1b\xb7\x11\x7f\xe7\xa7\xd8\xa6\xd3\x86\x72\x28\x4a\x99\xe9\xf4\x41\x23\x27\x96\x5b\x7b\xc6\x0f\xe9\x74\x52\xb7\x7d\x15\xee\x6e\x29\x22\xba\x03\x38\x00\x8e\x14\xe3\xd1\x77\xef\x2c\x16\xc0\x01\x10\x49\x49\x4d\xcc\x07\x5b\xbc\x03\xf6\x1f\x76\x7f\xfb\xc3\xf2\xe2\xcd\x9b\xd9\xec\x8f\xf0\xb1\xd7\xbb\xcf\xfa\x1e\x15\xe0\x83\x18\x36\x3d\x42\xab\x95\x33\xa2\x75\xb3\xd9\xe7\xb5\xb4\x20\x2d\x88\xe9\xa5\xa4\x7f\x07\x54\x4e\x38\xa9\x15\xe8\x15\xb8\x35\x7a\x21\xf0\x71\x54\x77\xb2\xe9\x11\x58\x9c\x75\x42\x75\xc2\x74\xcb\xd9\x27\x0b\x4a\x3b\xd8\x08\xe3\xe2\x86\xf8\x72\x01\xcd\xe8\xe0\x97\xd1\x3a\xb0\x6b\xbd\xb3\xb0\xd6\x3b\x18\xb4\x75\xe0\x48\x88\x9d\xd9\xb5\x1e\xfb\x6e\x52\x5b\xed\x96\xaa\xed\xc7\x4e\xaa\xbb\xc9\x0c\x85\x6e\xa7\xcd\x3d\x0b\x00\xe9\x2c\xf6\xab\x25\xf9\x82\x99\xaf\xd1\x47\xd0\xaa\xdf\x83\x42\xec\x2c\x38\x0d\x0d\x42\x87\x9b\x5e\xef\xb1\x03\xa9\x40\x2b\x04\xd1\xb6\x7a\x54\x6e\xe9\x05\xf8\xd5\xb9\x1f\x49\x8e\x5b\x0b\x07\x3b\x6f\x6b\x43\x06\x6a\xc3\x22\x50\xb4\x6b\x18\x2d\x9a\x6f\x6d\x14\x35\x93\xd6\xef\xfd\x8f\x18\x7b\x07\xba\xf9\x05\x5b\xb7\x80\x06\x7b\xbd\x63\x33\xab\x18\x77\x1a\x39\x80\x64\x26\x59\x69\xb0\xc3\x95\x54\xe8\xa5\x48\xe5\xd0\xac\x44\x8b\x96\x6d\x10\x06\x67\xa2\x37\x28\xba\x3d\xf0\x32\x6f\x87\x0f\x4f\x79\x40\x69\xe7\x6c\xf6\xe6\x62\x36\x93\xc3\x46\x1b\x97\x16\xf1\x9a\x95\xd1\x03\x5c\x3e\xfc\xc9\xce\x66\x9b\xb1\x99\xdc\x4d\x91\xbc\xaa\x36\x7c\x99\xcd\x00\x00\x2e\x2e\xe0\xb3\x76\xa2\x07\x3b\x6e\x36\xfd\x9e\xc2\xb5\xa2\xc3\xe1\x53\xf5\x81\x79\x90\xd6\xa1\x6a\xd1\xaf\x27\xe1\x5b\x61\xc0\xd1\xa6\x7f\xf9\x3d\x57\xf0\xef\x8f\xf2\xe1\xaf\x7f\x49\x02\x3f\x6c\xf9\xfc\x85\xa3\x9c\xc4\x41\x3a\x87\x1d\xec\xd6\xa8\xca\xa3\x90\x16\x5a\x83\xc2\x61\x97\x44\xa3\xdf\x5a\x58\xfa\x49\x49\x27\x45\x2f\x7f\xc5\x6e\x2e\xf9\xef\x52\xef\xd9\x8b\x14\xb3\x3f\xc2\x20\xec\xa4\x5b\x77\x46\xec\x42\xd0\x04\x9f\x6f\x65\xc2\x7f\xc3\xa2\xb9\x18\x28\x15\xa2\xae\x85\xdf\x73\x05\x37\x5d\x67\xd0\xda\x1f\x5f\xab\xbb\xc3\x8d\xb6\xd2\x71\x7a\x1c\xd6\xfc\x77\x5e\xf2\x44\xb1\xd3\xaf\x54\xab\x70\x97\xab\x1e\x28\x8d\xea\x48\xff\x24\x55\xad\xe9\xf5\x2e\x59\x67\xa8\x10\x2b\xd1\xef\x47\xa3\xfe\x1f\xd1\x02\x06\xdc\xb1\xb5\x06\x0c\x5a\x3d\x9a\x16\x8f\xe7\xca\x4f\x7e\xe1\xdf\xf8\xdd\x5c\xf4\xbd\xde\x61\x77\x73\x44\xed\x14\xef\x8b\x8b\x64\x4a\x2c\x7c\x06\x03\x0f\xa2\x52\x11\x72\xb5\x48\xe5\xe0\xa1\x64\x82\x01\x2e\x51\xc9\xab\xc5\x1d\xa6\x2a\x5a\x23\xac\x46\xd5\x12\x12\xd8\x58\xc8\xbc\x45\xa8\x0e\xee\xf4\x16\x0d\x95\x78\xc3\xc2\x36\x06\xfd\xf3\x0d\x41\x68\xab\x55\x27\xfd\xc6\x28\x4d\xaa\xaa\x5c\x63\xf5\xec\x7d\xcc\x5b\xd1\xf7\xd8\x2d\x73\xdd\xed\x1a\xdb\x7b\x0b\x6b\xb1\xd9\x50\x10\x1d\x98\x51\x39\x39\xa0\xdf\x89\x5b\x34\x20\x92\x7d\x3e\x9a\x85\x88\x28\xe9\xe7\x10\x6f\x7a\xaf\xd8\xf5\x06\x63\xe4\xa3\x57\x54\xc0\xf8\x70\x04\x5a\xc9\xc6\x28\x8d\xd3\x23\x42\xdb\x02\xac\xa6\xd7\xc6\x9f\xa6\xd2\xb0\x13\x7b\x58\x69\x32\x6c\x10\xbd\x6c\xa5\x1e\x2d\x1f\x84\xd3\x41\x25\x07\x30\x45\x45\x8f\x41\xa9\x54\x20\xa4\x59\xc2\x0d\xd8\x0d\xb6\x52\xf4\x21\x0d\xa6\x7c\x29\x3b\x05\x9b\xe0\xb4\x4f\xab\x28\x6d\xaa\x8f\x22\x0a\x94\x5a\x49\x8c\xd7\x5f\x41\xe7\xf2\x9f\x46\x6f\x65\x87\x66\x51\x3d\xff\x19\x5b\x94\xdb\xa7\xcf\xdf\x8b\xde\x27\x53\x80\xdc\xa0\x7e\xad\xfb\x8e\xfb\x4b\x13\xde\xeb\x15\x08\x1f\x00\x1b\x9b\x6a\x5c\x1e\x51\x37\xac\x2c\x11\x37\xa5\x4c\xc4\xc9\x42\x28\x65\x42\xf4\xc6\x07\x95\xce\x9f\x12\x23\xed\xa5\x8d\xf3\x4a\xf2\x19\x7c\x49\xef\xe9\xe3\x7b\x73\x14\xf9\x36\x0a\x4f\x4b\x1e\x0b\x4b\x22\xc0\x66\xcf\xf2\xd7\x1f\x63\x16\x72\xbe\x88\xfb\x58\x73\x0e\xef\x28\x4d\x7d\xed\x82\xf0\x0f\x85\xb9\x1b\xa9\xc1\xe6\xfb\xa9\x6c\xa2\x8a\xd8\x4b\x79\x8f\xc7\xf3\x54\x77\xcb\x7c\xd3\x27\x17\x52\xca\x82\xe0\x93\x47\x6a\xa3\xc2\xec\x43\x91\x46\x2c\x1a\x2d\x67\x0a\x1d\x4f\x2e\x80\xc4\x0e\x5a\xe1\x3e\xad\x6c\xd0\xd3\x19\x23\x94\x5d\xa1\x31\xd8\x2d\x49\x8b\x41\x37\x1a\xc5\x07\xab\x70\xd7\xef\x73\x21\xb1\x90\x82\x4a\x5d\x94\x93\x97\xcb\x65\x49\x95\x22\x9d\xaf\xc1\x26\x6b\x1a\xb9\x28\xec\x2d\xee\xa8\x98\x96\x87\xc2\x4c\x09\xb3\x1a\x55\x8a\x53\x0d\xc4\x57\xf0\xae\xcc\x51\xb6\xe8\xe4\xa1\x17\x5f\xcf\x43\xcc\x8b\x0d\x84\xe3\x4f\x3b\x27\xff\x1f\x3b\xa7\x97\xa2\x77\x0a\xcd\x8f\x4b\xc1\xed\xec\xac\x10\xc2\x01\x84\xeb\xf3\x1c\x02\xa6\xfc\x64\x69\x67\x47\x52\x2f\x84\xea\x35\x99\x57\xd0\xbb\x2a\xed\x7c\xae\x89\xae\xb3\x45\xa1\x39\x9b\xaa\x2b\x1c\x61\x56\xc1\xf4\xd5\xbb\x67\x0f\x67\x21\xb1\x74\x6e\x52\xb4\x39\x34\x4f\x26\xcb\xa4\x90\x8d\x69\xb0\x15\xa3\xc5\x29\x97\x8b\xf2\x22\x1b\xb3\xfc\xa5\x4c\x45\x13\x75\x07\x44\xf3\x3d\xc1\x6f\xfd\x76\xb2\x76\x2d\x0a\x47\x1a\x64\x82\x6d\xc7\x01\x3b\xef\xaa\x47\xe7\x95\xf6\x1d\x26\xa4\x5e\x68\xee\xcb\x27\xa9\x15\x42\x3d\xe7\x63\x3d\x94\x4e\x35\x88\xf4\xe8\x60\xeb\xfd\xbb\x3e\x0f\xdc\xcb\xfe\x01\xde\x25\x8a\xba\x2c\x5d\x7d\x2e\x05\xbf\x63\x61\xcb\x1a\x8c\x52\x26\xd6\x4c\xaa\x58\xce\x84\xea\xd9\x6c\x2c\xf6\xc0\x5b\xb8\x5c\x5e\x16\xef\xe3\x01\x6e\x0b\xd3\xb3\xa4\x0c\x0b\xe6\x75\x30\x26\xaf\x33\x2a\x0d\x6f\x8f\x3c\x3f\x2f\x5c\xcf\xf4\x64\xda\x12\xbe\x7c\x18\x36\x6e\x7f\x88\xea\x94\xf9\x5f\xe2\x21\x27\x1e\xe1\x05\x88\x3c\x9f\x7f\x45\xa3\x53\x3f\x57\x5d\xc2\x37\x39\xe1\x97\xe8\x7b\x42\xc2\x80\x63\xd4\x95\x7d\x17\x1f\xe8\xb2\x48\x2f\xa9\x61\xdb\x44\x3e\x72\x61\x9e\x71\x79\x21\x2c\x36\x41\x63\xcd\xb2\xfc\x25\xcf\x74\xcc\x0d\x7c\xfd\xf0\xfb\x24\x8c\x6f\x6c\xa1\xe1\x0b\xba\x3b\xf9\xfb\x97\x6f\xc8\x31\x55\x6d\x20\x0f\xa1\xbd\x82\xdb\x6f\xf0\x49\xeb\xa7\xd4\xae\xc3\x38\x7f\x1e\x2f\x9f\x41\xad\xcb\xe5\xe5\x59\x75\x56\xc4\x58\x6e\x54\x47\x34\xf9\x08\x09\x8b\x98\xc4\x68\xe5\x4d\x16\xdd\x40\xdc\x87\xbd\xb5\xd0\xfa\x7b\x6c\x6a\x55\xd4\xa6\x98\xe3\xf8\xe8\x36\x64\xd1\x4b\x58\x4e\x66\x4a\x45\x52\xe8\x68\x42\x73\xa5\xd8\x31\xeb\x8f\x3c\x2f\x92\xf4\x12\xd2\x12\xc5\x82\x8c\xb8\x1c\xe4\xe5\x85\x26\xda\xf6\xb9\x64\x3d\xa7\xc0\x9b\x96\xdb\xcc\xb9\x85\x87\x69\xb2\x6a\x88\x79\xe9\xeb\x07\xb8\x80\x16\x35\x81\xc8\xda\xf4\x70\x24\x91\x4f\xf5\xd5\xc9\xda\x43\x9d\xb5\x04\xb4\xaa\xf0\x89\xf9\x97\x4f\xe8\x13\x82\xfc\x43\x10\x33\xbf\x3c\xbb\x82\x6f\x38\x5c\xe1\xe6\xc6\xf5\xd4\x20\xdc\xf9\x0c\x33\x14\x07\xe5\xcb\xf3\x9b\x63\xd2\xae\x03\x62\x56\xd1\x3f\x22\xb7\x47\x6b\x59\xa8\x3f\xf5\x70\xa2\x2c\xaa\x54\xf1\xf8\x1b\x90\xec\xbb\x43\xc4\xe1\xa9\x95\x70\xc8\xf4\x13\xac\xa3\xb8\xc8\xd6\x1c\xe1\x05\x05\x7a\x9a\x56\x50\x25\xbd\x22\x39\x4b\x66\x51\x52\x8a\x05\xd8\xb1\xf1\xf7\x25\x9b\x33\x89\x5c\x58\xa2\xb1\x2e\x9b\xcc\x2c\xe8\x89\x8a\xed\x24\x1b\x4c\x2d\xaa\x7a\x35\xd8\xec\xc1\xe0\xa0\xb7\x71\xda\x16\xca\xd6\x8b\x4d\xd3\x9c\x83\xb4\xd1\x83\xcf\xc4\x5f\x43\x1a\xf1\xc8\x4c\x58\x1f\x06\x77\x92\x6f\x4e\x81\xfa\xba\xbc\x80\xb6\x88\x98\x28\xc7\x69\xc0\xe1\xee\x9c\x92\xa6\x18\x51\x9c\xce\x00\xce\x9a\x7f\xe0\x8e\x2f\x9a\x2f\x4a\x83\xd4\x60\x33\xbc\xe1\x66\x5b\x4d\x37\x4e\x45\xb4\x52\x7c\x64\xc2\x71\x05\xef\x4a\x10\x7f\xe2\xeb\xc9\x39\x49\xf1\xf5\x74\xdd\x64\x6a\x5e\x28\x25\x0b\xa4\xbf\x6a\x1e\xf6\xe0\xd0\xdd\xa3\x46\x84\xe2\xfb\x51\x12\xe4\x27\xb3\xe9\x32\x6c\xfc\x88\x21\x9f\x53\x2c\xe1\xa6\xef\x61\x25\x91\xee\xdf\xb2\x9a\x49\x12\x18\x46\x41\x4d\x2e\xa7\xa3\x9b\x34\xcf\x9c\xa9\x8c\x89\x60\xf3\xcc\xdd\xcf\xc4\xb3\xc1\xbb\x5e\xc1\x6e\x2d\xdc\x44\x73\xea\x31\x31\x37\xed\x4e\x47\xdd\x99\xad\xf5\x38\x86\x5c\x51\xe3\xd0\xd0\x6d\x42\x18\x04\x61\x1a\xe9\x88\xf4\x17\x0b\x7d\x54\xf3\x00\xd2\x4d\xa3\x9c\x06\xe4\x08\xec\x3d\x8f\x3d\x2f\x28\x7f\x02\x43\x3e\xfe\x25\x9e\x7f\x7f\x79\x49\xec\x37\xd7\xc2\xe9\x94\x8d\xba\x3c\x7f\xac\xa1\x2b\xa3\x0e\x9e\xf4\x89\x2d\x12\x7d\x94\xaa\x98\xa1\x55\xf9\x5f\x80\xc2\x61\xcc\xae\x6d\x3c\x2b\xad\x8f\x3f\x08\x90\xbe\xf9\xf5\xb9\x17\xc6\xac\xff\x22\xe8\xbd\x58\x45\x88\x61\x5c\x3a\xe4\x9b\xa0\x4a\xec\x65\x0b\xad\xd8\x88\x46\xf6\xd2\xed\x63\xec\xc2\x8f\x07\xd9\xfc\xc0\x0f\xcc\xf0\x61\xa3\x2d\xda\x9a\x46\xdd\x06\x16\x7a\x0b\x03\xba\xb5\xa6\xcb\x96\xd1\xe3\x1d\x87\xeb\x36\xce\x8e\x6e\xb3\x69\xff\x81\xa8\x14\x8e\xf5\x52\xdd\x5f\xff\xf9\xcb\xe1\x21\xd4\xe3\x0f\xf3\xa2\xa0\x2e\xd8\x8d\xc9\xe5\x34\xad\x2a\x96\x39\x61\xee\xd0\x1d\x0d\x51\x5a\xfb\x95\x63\x15\xce\xf8\x36\x26\x6b\x1e\xaa\xf7\xf1\xdd\x6f\x8c\x54\x90\xf3\x6c\xa0\xc2\xba\xdf\x35\x4e\xd4\x04\x72\xc0\x4e\x54\x7c\xba\x15\x71\x85\xc4\x8b\x4d\x5d\x29\x54\x1e\x43\x26\x60\x2a\x92\x13\x00\xfd\xfd\x65\xba\x87\x1c\xab\x92\x4c\xe6\xb1\x5a\xc9\x14\x94\xde\x7d\xa0\x3e\x43\x48\x38\x0d\xf7\xf9\xb7\xc2\x74\x61\x48\x30\x4b\x6c\x22\xc3\xd6\x24\xc5\xb7\xaa\x97\xfe\xfc\x73\xb8\xfe\x1f\x67\x8f\xb3\xff\x05\x00\x00\xff\xff\x54\x7c\xbf\x8c\x33\x1d\x00\x00")

func contractsFlowtokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsFlowtokenCdc,
		"contracts/FlowToken.cdc",
	)
}

func contractsFlowtokenCdc() (*asset, error) {
	bytes, err := contractsFlowtokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/FlowToken.cdc", size: 7475, mode: os.FileMode(420), modTime: time.Unix(1590085567, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0x12, 0x8b, 0xd5, 0x81, 0x8a, 0x65, 0xeb, 0xdf, 0x4a, 0xce, 0xa3, 0xda, 0x55, 0xfd, 0x15, 0xa9, 0xbc, 0x4c, 0xd3, 0x90, 0x19, 0x50, 0x28, 0xe, 0xad, 0x77, 0xe9, 0xde, 0xee, 0xc9, 0x7b}}
	return a, nil
}

var _contractsFungibletokenCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xcf\x73\xdb\xba\x11\xbe\xf3\xaf\xd8\x49\x0e\xb1\x53\xc5\x7e\x87\x4e\x0f\x99\xc9\x6b\x93\x69\x3c\x93\x4b\xdb\x69\xdd\xbe\xab\x20\x72\x29\xa1\x06\x01\x3e\x00\x94\xcc\xbc\xc9\xff\xde\xd9\xc5\x0f\x82\x14\x6d\xcb\xd3\xe7\x8b\x25\x12\x58\xec\x2e\xbe\xfd\xf6\x03\x74\xfb\xfe\x7d\x55\xbd\x85\xfb\x03\xc2\x9d\x32\x27\xb8\x1b\xf4\x5e\xee\x14\xc2\xbd\x79\x40\x0d\xce\x0b\xdd\x08\xdb\x54\xd5\xdb\xb7\xb0\x4d\x2f\xf9\xdd\x16\x6a\xa3\xbd\x15\xb5\x07\xa9\x3d\xda\x56\xd4\x58\x55\x64\x28\x7f\x05\x7f\x10\x1e\x84\x52\xd0\x26\xb3\x9e\xcd\xa6\x99\x0e\x4e\x66\x50\x0d\x1c\xc4\x91\x5e\xd1\xf3\xd6\xd8\x0e\xbc\xb9\xa9\xbe\xb5\x20\x60\x70\x68\x1d\x9c\x84\xf6\x8e\xde\x37\xd8\x2b\x33\x82\x00\x8d\xa7\x85\xa9\x0d\xf8\x03\x4a\x9b\xbf\x57\xc1\xb2\x46\x6c\x68\xa6\xec\x7a\x85\x1d\x6a\x4f\xc3\x60\x16\xc8\xe4\xef\x0d\xfb\x5f\x18\x59\xb8\xd7\x1a\x45\x39\xa2\x80\xc8\x8a\x1d\x14\x3a\x10\xba\x01\x2d\x3a\xa9\xf7\x15\x87\xeb\x67\x19\x70\x3d\xd6\xb2\x95\xe8\x6e\x42\x0a\xff\x23\x06\xe5\xb7\x60\xd1\x99\xc1\x52\xc2\xbe\x8a\xfa\x00\xa2\xae\xcd\xc0\xbe\x09\x0f\xe6\xa4\x5d\x08\x2e\xa5\x27\x05\xc1\x7e\x08\x72\x98\xf6\xa5\xc6\xca\xb4\xbc\x1c\x1b\xcd\x36\xc1\x79\x63\xb1\x01\xa9\x63\x4a\x92\x75\x7a\x2e\xf6\x31\xca\xe5\xa4\x83\x70\xd0\xa1\x3f\x98\xc6\x41\x8e\xc3\x9c\x34\x5a\x8e\xd0\xf8\x03\xda\xb8\x1d\xb5\xd0\x50\x0b\xa5\x62\x48\xff\xb0\xe6\x28\x1b\xb4\xdb\x0d\x6c\xff\x89\x35\xca\x23\x7f\xa6\x59\xdb\x2f\x42\x91\xa3\x53\xc0\x53\x6a\x1c\xbb\xe1\xca\x27\xd0\x60\xad\x84\x45\xe8\x2d\x7e\xa8\x8d\x6e\xa4\x97\x46\x87\x14\xf7\xc6\xf9\xf2\x19\xfb\x68\xd1\x79\x2b\x6b\x5f\x91\xb3\xf8\x88\xf5\x40\x2f\x21\xa6\xa5\x1d\x74\x1d\x06\x87\x54\x84\x90\x43\xf8\x23\xd0\x3a\x0e\x7b\x61\x85\x47\xd8\x61\x2d\x06\xf2\xc5\xc3\x5e\x1e\xd1\xf1\x70\x8a\x96\x3f\x88\x9d\x54\xd2\x8f\xb4\x05\xee\x20\x2c\x56\x02\x2c\xb6\x68\x51\xd7\x8c\x8b\x90\xe6\x90\xd0\xb0\x85\x5a\x8d\x80\x8f\xbd\x71\xd1\x54\x2b\x51\x35\x6e\xf2\xa8\x92\x1a\x8c\x46\x30\x16\x3a\x63\x31\x79\x3c\xa5\xe2\xa6\xaa\xbe\x51\xe9\x38\x13\x1d\x0a\xa9\x5f\x78\xd3\x89\x07\x84\x7a\x70\xde\x74\x39\xc3\x31\x35\x19\xf0\x94\x9b\x79\x96\xa9\x90\x0c\x1c\x85\x95\x66\xa0\xd1\x52\xef\x1d\x9c\xa4\x3f\xb0\xf9\x80\xbc\x9b\xea\xce\x58\xc0\x47\x41\x66\x36\x20\xa0\x15\x43\x8d\x9e\xf7\x7e\x87\x93\x75\x6c\x60\x37\xa6\xba\xe5\x1a\xe0\x74\x40\x02\xc5\xac\xb8\xbe\x8c\x30\x38\xa9\xf7\x85\xaf\xb4\xb5\x93\x6b\x9b\x18\xa6\x69\x17\x25\x9a\x09\xa3\x22\x07\x1c\xea\x86\x67\xda\x00\xb7\x54\x2d\x3d\xa2\xfd\xe0\xcd\x07\xfa\xbf\xe1\x88\xcc\xe0\xa9\x6a\x68\x4d\x22\x01\x5a\x88\xb9\x81\x82\x15\x50\x23\x59\x55\xa0\xb0\xd9\xa3\x05\xd7\x09\xeb\xf3\x52\x37\x70\x6f\xc2\x4a\xd1\xba\x37\x20\xf4\x54\x07\x9b\x2a\xd0\x53\xac\x51\x47\x29\x19\x79\xd1\xc6\x8a\x53\x91\x4a\x68\xad\xe9\x4a\x8c\x30\x55\x85\x12\x62\xe0\x36\xd8\x1b\x27\x7d\x46\x07\x18\x3d\x5b\xe9\x9d\x4b\xd8\x22\x86\xa4\xcc\x7b\x0c\xf6\xad\xd0\xae\x45\x7b\x53\x55\xef\x6f\xab\xea\xf6\x96\x79\xbc\x13\x52\x2f\x79\xbc\xd8\x85\xdb\x5b\xf8\x3b\x9b\x7e\x9a\x93\xa5\x52\x33\xc2\x94\xae\xa0\xf8\xdb\xdb\xaa\x1f\x76\x2b\xe4\xbf\xd8\xb2\xdf\xaa\x0a\x00\x20\x3a\xe5\x8d\x17\x0a\xf4\xd0\xed\xd0\x32\xda\x43\x6a\xa4\x06\x7c\x94\xce\x53\x25\xdd\xa4\xf1\xdf\x3c\x48\x07\x43\x1f\x4b\xab\x00\x9b\xa5\x47\xa8\xdd\x60\x63\x6f\x09\x66\xdd\xd0\xf7\x6a\x4c\xd3\x9d\x17\xa3\x23\xd2\x1b\xb8\xb4\x09\x27\xc1\x56\x23\x3c\xf2\x20\xf2\xff\x28\x6c\x98\xfd\x2f\x9e\xfc\x11\xfe\x7d\x27\x1f\xff\xf4\xc7\xec\xf4\xd7\x23\x26\x42\x96\x0e\xb0\x93\x9e\xb0\x7e\xa2\x8d\x23\x9f\xa6\xf0\x1d\xd4\x16\x85\xc7\x26\x9b\x46\x9e\x3a\xcb\xc6\x37\x2d\xbd\x14\x4a\x7e\xc7\xe6\x4a\x86\xcf\xf3\x75\xaf\x2f\x5a\x38\x24\x8d\x98\x2b\xe1\x4c\x07\x74\x89\x80\x90\x85\x0b\xbf\xc4\x41\x57\xa2\xa3\x06\x90\xd6\xda\xf0\x9c\x8f\xf0\xb9\x69\x2c\x3a\xf7\xe7\xd7\xae\x1d\xf1\x1a\x7a\xd2\xfa\xca\x7f\x0d\x43\xce\x16\xf6\x66\x6d\xd9\x44\x16\xf1\x7b\xc6\xc1\x5c\x47\x20\x71\x4c\x1d\x09\xd5\xe2\xaf\x83\xb4\x8c\x0a\x07\xad\xb1\x39\x21\xc4\x41\x71\xfe\xa2\xfc\x26\x1c\x31\x1d\x8c\x7d\x46\x5c\x9a\xf0\x0b\x42\x63\xf4\xbb\xbc\xd4\x7c\x15\xa3\x61\xbb\x4b\xfd\xec\x80\x16\x37\x69\x5e\xd1\x3d\x14\x0a\x62\x6b\xd3\x47\x9c\xf4\xc6\x39\x19\x09\xdb\xb4\x01\x2a\xb4\x7c\x24\xed\x3e\x46\xee\xb2\xcf\x14\x69\x70\x42\x63\x8d\xce\x09\x2b\xd5\x18\x15\x00\x53\x88\x39\x69\x88\x6e\xcc\xfc\xa7\xe4\x9f\x77\xd9\x89\x88\x63\x3d\xc6\x75\x52\xba\x8a\x67\xe5\xeb\xbb\x44\x45\xec\x8f\x1b\x76\x91\x1a\x96\x29\x65\x81\x90\xf8\xa9\x34\x10\xd8\xd9\x0f\x96\x30\xb3\xd4\x1a\xb9\xd7\x58\xec\xcc\x11\x9b\xdc\x73\xd6\x9d\xb9\x2f\x7a\xf9\x3b\xae\x6c\x74\x0e\x14\x1e\x51\x11\x4c\xfb\x61\xa7\x64\xbd\x81\xdd\x90\xb8\xca\x51\xfa\x04\x25\x77\xa7\xb0\x2b\x4d\xa5\x9d\xe2\x06\x3d\x29\x1c\x6e\x2a\xde\x58\x06\x06\xfb\x95\xf3\x38\xd7\x50\xa5\xad\x9a\x95\x18\xd7\xb2\x1a\x99\xcd\xc3\xf2\xc9\xd5\xe7\xc2\x09\xcb\x76\x62\x84\xbd\x15\xda\x47\x79\x15\x17\xc9\x21\x52\x67\x4d\x80\xa1\x70\xe4\x31\x31\x58\x76\xa1\xcf\x6a\x80\x36\x2a\xb4\x22\xc1\x2a\x35\x2a\xcf\x7a\x26\xdd\xa8\x60\xd9\x76\x69\x85\x71\x9a\x60\x92\x43\xf7\x07\x6b\x86\x3d\xb5\xc9\xac\x75\x2e\x8b\x28\x88\x16\x0e\x8b\x72\xf2\x42\x50\xbc\x79\x97\xc6\x44\xf6\x56\xc3\x99\xc5\x50\x5a\x7b\x75\x38\x54\x46\xed\xa0\x73\x81\x2c\x28\xec\xfa\x23\xfc\x25\xa0\xf9\xb7\x3c\x85\xa7\x19\xb7\x7c\x14\x3d\xd8\x5a\x74\x51\xf3\xb7\xd1\xe7\x00\x31\x2a\x0e\x38\x0a\x35\xe0\xd9\xb4\x30\xe5\x26\x96\x39\x7c\xfa\x04\xd1\x8b\xb3\x91\xf4\xf7\x26\xf1\xbc\x50\x71\x1c\x74\x83\xf3\xa4\xd3\x68\x25\x27\x3a\x04\x11\x52\x94\x2c\x46\xbd\x39\x75\x11\x8e\xe9\xcd\xcc\xfc\x8f\x6a\xfe\xe9\x47\xe6\xeb\xa4\xf2\xff\x1f\xbe\x8e\x4d\xe4\x9c\xae\xa5\x5e\xb6\xfd\x17\xe9\x5a\xea\x5a\x0d\x0d\x92\xa2\x4b\x07\x84\xe0\x42\x7d\xc0\xfa\x61\x1e\x79\x64\x80\x64\xe3\x84\x7c\xba\xa4\x5d\x21\x9d\x7d\x89\xcc\x0e\xb1\x07\x99\x5d\x15\x5c\xd0\x98\x34\x66\x5d\x52\x6f\x40\xc9\x07\x3a\x11\x2a\xc9\xa7\xab\x8e\x64\x89\xd0\x4d\xd6\x2d\xac\x35\xe9\x39\x69\x15\xd9\x32\x4a\x3d\xf4\x2a\x9c\x07\xe0\x45\xaa\x4f\xdb\xb2\xa0\xfa\x98\xe9\x8b\x98\x3e\xca\x7b\x22\xb3\xd0\xde\x93\x36\x0d\x21\x94\x13\xd7\xf7\x69\xaa\xb7\xb1\xc7\xe7\xea\x2b\x1a\xbe\x0a\x52\x24\xd4\xd4\xf5\xb2\xa8\x2c\xae\xd4\x14\xcd\xc8\xa5\xf1\x73\xac\xcb\xab\x9f\xae\x9f\x28\x8e\x28\x45\x32\x00\x52\x69\x04\xf8\x1d\xf1\x52\xd0\xc7\xa3\xec\xf3\x98\x27\x59\x28\xa4\x0e\x08\x9a\xd4\x02\x1f\xff\xa0\x3c\xad\xa7\xf9\xd4\x27\x8b\x42\x21\xbe\x23\xb5\xa5\xf1\x14\xc6\xbd\x0b\x92\x2b\x4a\xcc\x4d\x09\xe5\x64\x82\xd5\x79\x96\x97\x50\x1b\x6b\xb1\xf6\x6a\xbc\x04\x32\x31\xa8\x05\x62\x26\xc1\xbe\xe0\x8b\xc8\xe5\xef\xdc\x12\x0f\x49\x51\xc7\xf1\x73\x35\x4d\x7f\xe4\xe1\xd5\xe2\xed\xd9\x76\xaf\x73\xa8\x43\xd5\x96\x54\x98\xac\xac\x6f\xf7\x97\xc5\x36\x97\xa9\x49\x80\x0d\x8f\x92\xa1\x4b\x01\x50\xee\x5b\x79\xb4\x29\x5a\xcc\x12\x01\xd3\x0d\x84\x37\x4f\x9d\x5a\x97\xac\x76\xcf\x27\xc2\x5a\x09\x2b\xd2\x65\x06\xf3\x5a\x6d\xf9\xd8\x37\xf6\xac\x4a\xc4\xda\x01\xac\x43\xa1\xe7\xbc\x84\x47\xb4\xe3\xf2\x30\x98\x67\xce\x2f\x0a\xdc\xf2\xa4\x17\x6d\x70\x26\x1b\x6c\xa5\xc6\xd2\x93\xd0\x05\xcd\xee\xbf\x18\x2d\x65\x2e\x0c\x97\x01\xb9\xd3\x5d\x76\x41\x54\xdc\x0b\x15\xa5\x11\x99\x9d\xb3\xe9\xf2\x35\x0a\xbd\x99\xae\x52\x9e\x42\x39\x3b\xf8\x31\x0b\xe0\x4d\xe6\xc7\x4d\x01\xfb\x57\xa0\xfe\xf5\xa0\x8f\x46\xa7\xdb\x91\xb0\x7d\x31\xa1\xe1\xaa\x6b\x12\x91\xf2\xfb\x5c\xba\xa4\xcb\x53\x73\x72\xa4\xfd\x28\x8a\xa4\x4f\x17\x08\x4e\x8e\x1e\x17\x2a\xfc\xf9\xea\x5b\x3d\x0f\x14\x5a\x7f\x1b\xb4\xc4\x76\x52\xfb\x6c\xdf\xe5\x55\x53\xef\x82\x24\xb5\x92\xdc\x3f\x96\xd0\xc8\x5d\x30\x59\xc6\x66\xc6\x60\xf0\xfb\xe8\xaf\xd5\x56\x31\xa3\x8e\x9f\x5f\x50\x51\x9f\x83\x74\x9a\x34\x51\xa2\x10\x15\x04\xa6\xd0\x60\x2c\xe0\xaf\x83\x50\xe1\xdb\x8a\xa0\x7a\x56\x46\xc1\xb3\x3a\x91\x8e\x25\x9c\x26\xd2\xed\x42\x4d\xb7\x41\xdb\x1d\xb6\xc6\xe2\x96\x35\x0a\xfa\xb8\x13\x6a\xc8\x8b\x2e\xfa\xcc\x9a\xf1\x78\x9f\xbb\xc3\xbd\xd4\x9a\x50\xb4\xb8\x22\x9d\x2e\x4f\x57\x66\xbf\xcc\xc8\xec\xe0\x55\xf9\xf8\x1a\x3e\x3c\x9f\xed\xbf\xa5\x0e\x77\xd6\x98\xf9\x4a\x2c\xca\x9f\x29\xb3\xbd\xc5\x23\xdf\x57\x16\xe8\x7b\x9d\x86\x5d\xd1\x44\xe0\xc5\x03\x9e\x21\x56\xd0\x93\x5e\x58\xd1\xa1\x8f\xd7\xdf\xa2\x69\xe6\xe2\xa7\x28\x83\x48\x73\x0b\x24\xc4\x4b\xf8\x27\x4b\xf2\x55\x3a\xe8\xc2\xc6\xb8\xb6\x0d\x7f\x48\x8f\x4b\xd9\xf4\x94\x56\x7a\x7e\x53\xdc\xd0\xbd\xb8\x1b\xd3\xdd\xd0\xab\x4e\x14\x41\xdf\x7c\xed\x7a\x3f\xae\xb5\xd9\xcf\x7a\x0c\x77\xad\xe9\xa7\x87\xf9\x49\x9b\x2f\x46\xd9\x42\xfc\x69\xa8\xec\x4d\xb3\x9b\x95\x83\x98\x5c\xfe\xf4\x09\x7e\x5a\x36\x0f\xda\x91\xa5\x2f\x57\x6b\x9c\xb3\xb2\x25\xe7\x87\xb6\x49\x9a\xc2\x1b\x6a\x04\x1a\x4f\x6a\x4c\x5a\x2e\x3a\xc9\x09\xe6\x1f\x76\xbe\xa3\x35\xe7\x9a\x24\x65\xea\x47\xf5\xbf\x00\x00\x00\xff\xff\xce\x85\x62\x0d\xab\x1b\x00\x00")

func contractsFungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsFungibletokenCdc,
		"contracts/FungibleToken.cdc",
	)
}

func contractsFungibletokenCdc() (*asset, error) {
	bytes, err := contractsFungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/FungibleToken.cdc", size: 7083, mode: os.FileMode(420), modTime: time.Unix(1590084539, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0x24, 0x3b, 0x7e, 0x5b, 0x96, 0x55, 0x20, 0x21, 0x25, 0x10, 0x74, 0xe2, 0x3e, 0x38, 0xca, 0x8b, 0xf, 0x41, 0xc6, 0x9c, 0xcc, 0x2f, 0x92, 0x12, 0xf0, 0x2d, 0x4, 0xdc, 0xc0, 0xf8, 0xd8}}
	return a, nil
}

var _contractsServiceaccountCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x4c\x02\x0d\x12\x24\xb2\x0b\xa5\x07\x91\x0f\x52\xb7\x3e\x97\xd4\xe9\xb5\xac\x56\x23\x6b\xc9\x7a\x57\xac\x46\xfe\xc0\xf8\xbf\x97\x95\x56\xb2\xd6\x1f\x35\x2d\x2d\x34\x27\x25\xf3\xde\xcc\xbc\xb7\x33\x13\xb1\x28\xb5\x21\x98\xd6\x6a\x2e\x52\x89\x33\xfd\x86\x0a\x72\xa3\x17\x30\x5e\xbf\xab\x82\x2e\x2c\xf5\xea\x5c\x08\x71\xa2\x15\x19\xc6\x69\x10\x0c\xca\x3a\x05\xde\xfd\xfd\x1b\x9a\xa5\xe0\xf8\xcc\xb9\xae\x15\xc1\x36\x08\x00\x00\x2c\x44\x22\x01\x19\xa6\x2a\xc6\x49\x68\x35\x45\x4c\xe0\x75\x2a\xd6\x1f\x3f\x78\x10\xd6\x32\x27\x06\xd9\x21\xac\xc7\xe5\xb5\x82\x0c\xb3\x9a\xd3\xcc\x4b\x18\xfe\xb0\x74\x4a\xe0\xb9\xa6\xc2\xb5\x10\xc1\xb6\xe1\xd9\x9f\xa6\x05\xab\xed\x3b\xab\x25\xc1\x03\x54\x28\xf3\x38\xc3\xdc\xfe\x3a\xeb\x03\xa1\x4d\x12\x79\xac\x1c\xb1\xe5\xdc\xdf\x0d\x32\xc4\x2b\x41\x45\x66\xd8\x2a\x64\x0b\x5b\x2b\x69\x13\xfa\x2a\xa3\xa0\xcf\x34\x30\x30\xce\xb0\xd4\x95\xa0\xd0\x1a\x99\xd8\xb4\x5d\x89\xb6\xf0\xee\x94\xda\xe7\x23\x6f\xfe\x13\xc5\xc7\x8f\xf6\x57\x54\x0b\x25\xe8\xf3\xa0\xd7\x4b\x6a\x47\x23\x68\x5a\x40\x60\xa0\x70\x35\x98\xe5\x56\x0a\x53\x19\x94\x35\x81\x20\x10\x0a\x2a\xd2\x86\xcd\xb1\x67\xdb\xd4\x71\xc5\x96\x18\xde\xdf\xf5\xcc\x98\x37\x09\xbf\x2c\x4a\xda\xb4\x56\x45\xb7\x40\x3a\x81\x91\xa3\x8f\xf2\x0e\xea\x74\x9c\xec\xa6\xac\x53\x29\x38\x70\x56\xb2\x54\x48\x41\x1b\x20\x0d\x54\xa0\x6b\x8c\x0a\x46\xa0\x95\xdc\x00\xae\x4b\x5d\x61\x35\x4c\x62\x61\xce\x37\xeb\x4a\x33\x57\x40\x85\xd1\xf5\xbc\x68\x82\x2f\xc8\x51\x2c\xd1\x80\x50\x84\x26\x67\xfc\x40\x93\x14\xea\xed\xfe\x66\xeb\x2d\x7e\xdc\x91\x76\x8f\x61\x8f\x6e\x0a\xb6\xad\xee\x65\x75\xc0\x5b\x0f\x46\xcc\xcc\x91\xce\xda\xd0\x63\xff\x91\x1f\x29\x93\x4c\x71\x84\x5c\xa0\xcc\x3c\x33\x3e\xb9\xc8\xef\x78\xe1\x38\x17\xad\x70\xb8\x3f\x75\xe2\xe4\x5e\xef\xa7\xdb\x65\xef\x87\xfc\x6b\x53\xbd\x1b\xf3\xee\x0a\x1e\x2c\xb7\x33\xe2\x05\x73\x78\x68\x78\x5e\x6f\xf1\x1c\x69\xd2\x7b\x1c\x9e\x13\x14\x5d\xf9\xac\x54\x1b\xa3\x57\xbf\xb0\x29\xba\xda\x3f\xab\x41\xaa\x8d\x1a\x34\x12\xbb\xcf\x4b\x7a\xdb\x75\x3a\xb5\xd2\x09\xdc\xec\x17\xb0\x9d\x88\xed\x61\xbd\xe6\x35\xbb\x46\x0f\xd0\x8f\xee\xbe\x9c\xdb\x51\x78\x7a\x82\x92\x29\xc1\xc3\xeb\x57\xc5\x52\x89\x76\xfa\xda\x5c\x60\x30\x47\x83\x76\x82\xdc\x44\xba\x96\xdb\x23\x08\x4b\xfb\x7d\xed\xbd\xa5\xbd\x52\xe1\xf0\x0c\x9d\xf8\x27\x00\x0f\x30\x8e\xc7\xe3\xf7\x3e\xe6\xf8\x6c\x7a\xb8\x5d\xb0\x0b\x7e\x06\x00\x00\xff\xff\x56\x24\xdf\xe5\xb5\x07\x00\x00")

func contractsServiceaccountCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsServiceaccountCdc,
		"contracts/ServiceAccount.cdc",
	)
}

func contractsServiceaccountCdc() (*asset, error) {
	bytes, err := contractsServiceaccountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/ServiceAccount.cdc", size: 1973, mode: os.FileMode(420), modTime: time.Unix(1590084539, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0x94, 0xa4, 0x32, 0xb, 0xce, 0xcb, 0x4f, 0x94, 0xec, 0x20, 0xa6, 0x43, 0x95, 0xe3, 0xaf, 0x41, 0xf1, 0x4f, 0x13, 0x4c, 0x3e, 0x5d, 0x35, 0xb1, 0xf1, 0xd4, 0x93, 0x19, 0x28, 0x21, 0x49}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/FeeContract.cdc": contractsFeecontractCdc,

	"contracts/FlowToken.cdc": contractsFlowtokenCdc,

	"contracts/FungibleToken.cdc": contractsFungibletokenCdc,

	"contracts/ServiceAccount.cdc": contractsServiceaccountCdc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": &bintree{nil, map[string]*bintree{
		"FeeContract.cdc":    &bintree{contractsFeecontractCdc, map[string]*bintree{}},
		"FlowToken.cdc":      &bintree{contractsFlowtokenCdc, map[string]*bintree{}},
		"FungibleToken.cdc":  &bintree{contractsFungibletokenCdc, map[string]*bintree{}},
		"ServiceAccount.cdc": &bintree{contractsServiceaccountCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
