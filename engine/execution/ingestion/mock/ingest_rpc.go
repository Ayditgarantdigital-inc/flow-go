// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import flow "github.com/dapperlabs/flow-go/model/flow"

import mock "github.com/stretchr/testify/mock"

// IngestRPC is an autogenerated mock type for the IngestRPC type
type IngestRPC struct {
	mock.Mock
}

// ExecuteScriptAtBlockID provides a mock function with given fields: script, blockID
func (_m *IngestRPC) ExecuteScriptAtBlockID(script []byte, blockID flow.Identifier) ([]byte, error) {
	ret := _m.Called(script, blockID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, flow.Identifier) []byte); ok {
		r0 = rf(script, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, flow.Identifier) error); ok {
		r1 = rf(script, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: address, blockID
func (_m *IngestRPC) GetAccount(address flow.Address, blockID flow.Identifier) (*flow.Account, error) {
	ret := _m.Called(address, blockID)

	var r0 *flow.Account
	if rf, ok := ret.Get(0).(func(flow.Address, flow.Identifier) *flow.Account); ok {
		r0 = rf(address, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Address, flow.Identifier) error); ok {
		r1 = rf(address, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
