// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import execution "github.com/dapperlabs/flow-go/engine/execution"
import flow "github.com/dapperlabs/flow-go/model/flow"
import mock "github.com/stretchr/testify/mock"
import state "github.com/dapperlabs/flow-go/engine/execution/state"

// ComputationManager is an autogenerated mock type for the ComputationManager type
type ComputationManager struct {
	mock.Mock
}

// ComputeBlock provides a mock function with given fields: block, view
func (_m *ComputationManager) ComputeBlock(block *execution.CompleteBlock, view *state.View) (*execution.ComputationResult, error) {
	ret := _m.Called(block, view)

	var r0 *execution.ComputationResult
	if rf, ok := ret.Get(0).(func(*execution.CompleteBlock, *state.View) *execution.ComputationResult); ok {
		r0 = rf(block, view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.ComputationResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*execution.CompleteBlock, *state.View) error); ok {
		r1 = rf(block, view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteScript provides a mock function with given fields: _a0, _a1, _a2
func (_m *ComputationManager) ExecuteScript(_a0 []byte, _a1 *flow.Header, _a2 *state.View) ([]byte, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, *flow.Header, *state.View) []byte); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, *flow.Header, *state.View) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
