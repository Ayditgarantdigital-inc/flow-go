// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import observation "github.com/dapperlabs/flow-go/protobuf/services/observation"

// ObserveServiceClient is an autogenerated mock type for the ObserveServiceClient type
type ObserveServiceClient struct {
	mock.Mock
}

// ExecuteScript provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) ExecuteScript(ctx context.Context, in *observation.ExecuteScriptRequest, opts ...grpc.CallOption) (*observation.ExecuteScriptResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.ExecuteScriptResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.ExecuteScriptRequest, ...grpc.CallOption) *observation.ExecuteScriptResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.ExecuteScriptResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.ExecuteScriptRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) GetAccount(ctx context.Context, in *observation.GetAccountRequest, opts ...grpc.CallOption) (*observation.GetAccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.GetAccountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.GetAccountRequest, ...grpc.CallOption) *observation.GetAccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.GetAccountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.GetAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByHeight provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) GetBlockByHeight(ctx context.Context, in *observation.GetBlockByHeightRequest, opts ...grpc.CallOption) (*observation.BlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.BlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.GetBlockByHeightRequest, ...grpc.CallOption) *observation.BlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.BlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.GetBlockByHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByID provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) GetBlockByID(ctx context.Context, in *observation.GetBlockByIDRequest, opts ...grpc.CallOption) (*observation.BlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.BlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.GetBlockByIDRequest, ...grpc.CallOption) *observation.BlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.BlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.GetBlockByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHeaderByHeight provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) GetBlockHeaderByHeight(ctx context.Context, in *observation.GetBlockHeaderByHeightRequest, opts ...grpc.CallOption) (*observation.BlockHeaderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.BlockHeaderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.GetBlockHeaderByHeightRequest, ...grpc.CallOption) *observation.BlockHeaderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.BlockHeaderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.GetBlockHeaderByHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHeaderByID provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) GetBlockHeaderByID(ctx context.Context, in *observation.GetBlockHeaderByIDRequest, opts ...grpc.CallOption) (*observation.BlockHeaderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.BlockHeaderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.GetBlockHeaderByIDRequest, ...grpc.CallOption) *observation.BlockHeaderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.BlockHeaderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.GetBlockHeaderByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionByID provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) GetCollectionByID(ctx context.Context, in *observation.GetCollectionByIDRequest, opts ...grpc.CallOption) (*observation.CollectionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.CollectionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.GetCollectionByIDRequest, ...grpc.CallOption) *observation.CollectionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.CollectionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.GetCollectionByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvents provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) GetEvents(ctx context.Context, in *observation.GetEventsRequest, opts ...grpc.CallOption) (*observation.GetEventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.GetEventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.GetEventsRequest, ...grpc.CallOption) *observation.GetEventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.GetEventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.GetEventsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlock provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) GetLatestBlock(ctx context.Context, in *observation.GetLatestBlockRequest, opts ...grpc.CallOption) (*observation.BlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.BlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.GetLatestBlockRequest, ...grpc.CallOption) *observation.BlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.BlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.GetLatestBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlockHeader provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) GetLatestBlockHeader(ctx context.Context, in *observation.GetLatestBlockHeaderRequest, opts ...grpc.CallOption) (*observation.BlockHeaderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.BlockHeaderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.GetLatestBlockHeaderRequest, ...grpc.CallOption) *observation.BlockHeaderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.BlockHeaderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.GetLatestBlockHeaderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) GetTransaction(ctx context.Context, in *observation.GetTransactionRequest, opts ...grpc.CallOption) (*observation.TransactionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.TransactionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.GetTransactionRequest, ...grpc.CallOption) *observation.TransactionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.GetTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionResult provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) GetTransactionResult(ctx context.Context, in *observation.GetTransactionRequest, opts ...grpc.CallOption) (*observation.TransactionResultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.TransactionResultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.GetTransactionRequest, ...grpc.CallOption) *observation.TransactionResultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.TransactionResultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.GetTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) Ping(ctx context.Context, in *observation.PingRequest, opts ...grpc.CallOption) (*observation.PingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.PingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.PingRequest, ...grpc.CallOption) *observation.PingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.PingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.PingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTransaction provides a mock function with given fields: ctx, in, opts
func (_m *ObserveServiceClient) SendTransaction(ctx context.Context, in *observation.SendTransactionRequest, opts ...grpc.CallOption) (*observation.SendTransactionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *observation.SendTransactionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *observation.SendTransactionRequest, ...grpc.CallOption) *observation.SendTransactionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observation.SendTransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *observation.SendTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
