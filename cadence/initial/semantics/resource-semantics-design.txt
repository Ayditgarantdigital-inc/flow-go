Design for K semantics covering Resources
=========================================

During static checking/elaboration of statements+expressions.
* Elaborate ambigous literals with type from inference+defaulting
* Resolve all type names to a fully-qualified form, qualfied by
  account id and surrounding contract namespaces
* Resolve method calls to qualify method name with the type of the
  struct/resource/interface that declares the method
* Static calculation of environment will record type, let vs. var,
  and resource vs. value of names in scope.
  Simple check forbids writes to let-bound names, and wrong assignment
  operator on vars.
* Dataflow analysis computes whether local resource variables may be
  empty at each point in program (can take advantage of structured
  control statmements to handle loops with closed form equations rather
  than through iteration).
  Error if Resources are definitely left dangling at end of
  function/method/scope.
* Dataflow analysis also tracks status of Resource-typed fields when
  checking a method, none may be currently-taken at a self call
  or return statement.

Definition processing
* As in other OO semantics, static analysis pass checks and accumulates
  elements of a compound type definitions.
  For structs+resources:
  - table of methods
  - table of fields
  For interfaces:
  - table of methods, with types and contracts
* Interface implementations will be held in a cell indexed by a pair of
  concrete type and interface, with entries recording for each interface
  method either a concrete implementation, or that the underlying struct/reference
  already had a method.
* Checking an interface implementation, whether from interface list on
  concrete type definition or an implementation declaration, will check
  that methods exist at necessary types, and then recursively check
  if super-interfaces are implemented.

? Should contracts from an interface ever be checked we calling a method
  that was defined as part of struct?
  - would be sensible for interfaces that were part of struct definition
  - cannot allow when the interface and implementation was defined by
    some arbitrary third party, else they may do

    > resource interface IRuin {
    >  <important Kitty method> { pre {false: "HAHAHA" } }
    > }
    > impl IRuin for <crytpokitties account>::Kitty {}

Execution
* For scope management, identifier environment maps to index in local store.
* store store slots may hold a value or be empty (empty only for
  Resource-typed variables). Clean up at end of scope, checking that
  Resource slots are empty (to support that resources must be
  explicitly destroyed rather than just lost).
* Account storage in a per-account map indexed by type.
  (if we want imperative "publish" rather than separate public and
  private storages, "published" state would be recorded alongside value).
* Compound type values record concrete type, used to look up
  implementation when executing method calls.
* Resource values have flag for whether value is currently borrowed,
  must be unset if value is being moved or is target of
  non-self method call, flag is set on non-self method calls
  (including through references).
  (Note that mutable borrows are not currently exposed as part of type
   system, but it is implicitly part of the semantics of allowing
   in-place method calls on Resource-typed fields without first
   moving the value into a local variable).
* Compound value types represented with K value rather than flattened
  into indexes to memory addresses, to facilitate passing by value.
  During method calls, a context cell holds current value
  and path into potential parent value, unfolding/refolding
  as calls are made and return.
