syntax = "proto3";

package flow.gossip.messages;

option go_package = "messages";

// Message models a single message that is supposed to get exchanged by the gossip network
message GossipMessage {
  bytes Payload = 1;
  uint64 messageType = 2;           // Name of RPC method to be invoked on the message
  repeated string Recipients = 3;   // Address of the recipients to which the message should be delivered
  string Sender = 4;                // Address of the sender of this message
  repeated string Path = 5;         // Address of the nodes that this message visited so far
  uint64 TTL = 6;                   // The time to live of the message, i.e., maximum number of hops it should be gossiped
}

message Socket {
  bytes ip = 1;
  uint32 port = 2;
}

message HashMessage {
  bytes  hashBytes = 1;
  Socket senderSocket = 2;
}

message EventProcessRequest {
  bytes Event = 1;
  uint32  ChannelID = 2;
  string  SenderID = 3;
}


////////////////////////////////////////////////////////////////////////////
// 2 testing messages + rpc service to be deleted later

service MessageReceiver {
  rpc QueueService (GossipMessage) returns (GossipReply) {}
  rpc StreamQueueService (stream GossipMessage) returns (stream GossipReply) {}
}

message GossipReply {
  bytes responseByte = 1;
}

////////////////////////////////////////////////////////////////////////////
