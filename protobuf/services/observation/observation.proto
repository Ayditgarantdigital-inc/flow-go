syntax = "proto3";

package flow.services.observation;

option go_package = "observation";

import "sdk/entities/entities.proto";

// ObserveService is the user-facing API provided by access nodes.
service ObserveService {

  // Ping is used to check if the observation node is up
  rpc Ping (PingRequest) returns (PingResponse);

  // Block (block header)
  // GetLatestBlock gets the latest sealed or unsealed block.
  rpc GetLatestBlock (GetLatestBlockRequest) returns (BlockResponse);
  // GetBlockByHash gets a block by its hash
  rpc GetBlockByHash (GetBlockByHashRequest) returns (BlockResponse);
  // GetBlockByHeight gets a block by its height
  rpc GetBlockByHeight (GetBlockByHeightRequest) returns (BlockResponse);

  // Block details (block payload)
  // GetLatestBlockDetails gets the block details of the latest sealed or unsealed block.
  rpc GetLatestBlockDetails (GetLatestBlockDetailsRequest) returns (BlockDetailsResponse);
  // GetBlockDetailsByHash gets the block details by the block hash
  rpc GetBlockDetailsByHash (GetBlockDetailsByHashRequest) returns (BlockDetailsResponse);
  // GetBlockDetailsByHeight gets the block details by the block height
  rpc GetBlockDetailsByHeight (GetBlockDetailsByHeightRequest) returns (BlockDetailsResponse);

  // Collection
  // GetCollectionByHash gets a collection by its hash
  rpc GetCollectionByHash (GetCollectionByHashRequest) returns (CollectionResponse);
  // GetCollectionByHeight gets a collection by its height
  rpc GetCollectionByHeight (GetCollectionByHeightRequest) returns (CollectionResponse);

  // Transaction
  // SendTransaction submits a transaction to the network.
  rpc SendTransaction (SendTransactionRequest) returns (SendTransactionResponse);
  // GetTransactions gets a transaction by hash.
  rpc GetTransaction (GetTransactionRequest) returns (GetTransactionResponse);
  // GetTransactionStatus gets the statue of a transaction
  rpc GetTransactionStatus (GetTransactionRequest) returns (GetTransactionStatusResponse);

  // Account
  // GetAccount gets an account by address.
  rpc GetAccount (GetAccountRequest) returns (GetAccountResponse);

  // Script
  // ExecuteScript executes a script against the latest sealed world state.
  rpc ExecuteScript (ExecuteScriptRequest) returns (ExecuteScriptResponse);

  // Events
  // GetEvents retrieves events matching a given query.
  rpc GetEvents (GetEventsRequest) returns (GetEventsResponse);
}

message PingRequest {}

message PingResponse {
  bytes address = 1;
}

message SendTransactionRequest {
  flow.sdk.entities.Transaction transaction = 1;
}

message SendTransactionResponse {
  bytes hash = 1;
}

message GetLatestBlockRequest {
  bool isSealed = 1;
}

message GetBlockByHashRequest {
  bool hash = 1;
}

message GetBlockByHeightRequest {
  bool height = 1;
}

message BlockResponse {
  flow.sdk.entities.BlockHeader block = 1;
}

message GetLatestBlockDetailsRequest {
  bool isSealed = 1;
}

message GetBlockDetailsByHashRequest {
  bool hash = 1;
}

message GetBlockDetailsByHeightRequest {
  bool height = 1;
}

message BlockDetailsResponse {
  flow.sdk.entities.Block block = 1;
}

message GetCollectionByHashRequest {
  bool hash = 1;
}

message GetCollectionByHeightRequest {
  bool height = 1;
}

message CollectionResponse {
  flow.sdk.entities.Collection collection = 1;
}

message GetAccountRequest {
  bytes address = 1;
}

message GetAccountResponse {
  flow.sdk.entities.Account account = 1;
}

message ExecuteScriptRequest {
  bytes script = 1;
}

message ExecuteScriptResponse {
  bytes value = 1;
}

message GetEventsRequest {
    string type = 1;
    uint64 startBlock = 2;
    uint64 endBlock = 3;
}

message GetEventsResponse {
    repeated flow.sdk.entities.Event events = 1;
}


message GetTransactionRequest {
  bytes hash = 1;
}

message GetTransactionResponse {
  flow.sdk.entities.Transaction transaction = 1;
  repeated flow.sdk.entities.Event events = 2;
}

message GetTransactionStatusResponse {
  flow.sdk.entities.TransactionStatus status = 1;
}
