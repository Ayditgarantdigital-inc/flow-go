apiVersion: v1
kind: Service

metadata:
  name: flow-verification-node-v1
  namespace: flow

  labels:
    app: flow-test-net
    node: verification
    env: staging
    owner: Kan
    version: v1

spec:
  type: ClusterIP
  selector:
    app: flow-test-net
    node: verification
    env: staging
    version: v1

  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: http # reference to the name of the port in your container config
    - name: grpc
      protocol: TCP
      port: 3569
      targetPort: grpc # reference to the name of the port in your container config

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: flow-test-net
    node: verification
  name: flow-verification-node-claim
  namespace: flow
spec:
  accessModes:
  - ReadWriteOnce
  dataSource: null
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---

apiVersion: apps/v1
kind: Deployment
metadata:
  # This is the full name of your deployment. It must be unique
  name: flow-verification-node-v1
  namespace: flow

  # Best practice labels:
  #   app: <app-name> (the non-unique version of metadata.name)
  #   kind: [web|worker]
  #   env: [staging|production|canary|test|dev]
  #   owner: who to ask about this service
  #   version: the major version of this service (v1/v2/v1beta1)
  labels:
    app: flow-test-net
    node: verification
    env: staging
    owner: Kan
    version: v1

spec:
  replicas: 1
  selector:
    matchLabels:
      app: flow-test-net
      node: verification
      env: staging
      version: v1

  # Deployment strategy dictates how an update will be rolled out across the deployment
  strategy:
    type: Recreate

  # How long should we wait (max) for deployment to be up, when checking rollout status
  progressDeadlineSeconds: 60
  # Minimum number of seconds that the deployment should be ready, to be considered available
  minReadySeconds: 1

  template:
    metadata:
      annotations:
        # Set to "false" to opt out of prometheus scrapes
        # Prometheus still needs a port called "metrics" (below) to scrape properly
        prometheus.io/scrape: 'true'

        # Set the path to the API endpoint that exposes prometheus metrics, or leave blank for `/metrics`
        # prometheus.io/path: "/metrics"

      labels:
        app: flow-test-net
        node: verification
        env: staging
        owner: Kan
        version: v1
        kind: web

    spec:
      imagePullSecrets:
        - name: gcr
      containers:
        - name: flow-test-net
          # No tag, will be attached by teamcity
          image: gcr.io/dl-flow/verification
          args: 
            - "--nodeid"
            - "1234567890123456789012345678901234567890123456789012345678901234"
            - "--entries"
            - "verification-1234567890123456789012345678901234567890123456789012345678901234@localhost:3569=1000" # PORT 3569

          # Ports exposed can be named so other resources can reference
          # them by name and not have to hard code numbers
          ports:
            - name: grpc
              containerPort: 3569
            - name: http
              containerPort: 8080
            # Prometheus is looking specifically for a port named 'metrics'
            # This may be the same as the above port, or different
            - name: metrics
              containerPort: 8080

          # Environment variables
          env:
            - name: ENV
              value: STAGING

          # Resource requests and contraints
          resources:
            requests:
              cpu: '125m'
              memory: '128Mi'
            limits:
              cpu: '250m'
              memory: '256Mi'
          volumeMounts:
            - name: badger-volume
              mountPath: /flowdb

          # The current liveness and readiness probes use the /metrics endpoint, which is non-ideal and MVP only
          # These probes should eventually make use of the gRPC server's Ping function, or should at least
          # be moved over to a /live endpoint that has some introspection into the gRPC's liveness/readiness

          # Readiness Probe
          readinessProbe:
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: 5
            successThreshold: 1
          
          # Liveness Probe
          livenessProbe:
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
      volumes:
        - name: badger-volume
          persistentVolumeClaim:
            claimName: flow-verification-node-claim