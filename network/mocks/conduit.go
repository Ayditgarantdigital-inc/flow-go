// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapperlabs/flow-go/network (interfaces: Conduit)

// Package mocks is a generated GoMock package.
package mocks

import (
	flow "github.com/dapperlabs/flow-go/model/flow"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConduit is a mock of Conduit interface
type MockConduit struct {
	ctrl     *gomock.Controller
	recorder *MockConduitMockRecorder
}

// MockConduitMockRecorder is the mock recorder for MockConduit
type MockConduitMockRecorder struct {
	mock *MockConduit
}

// NewMockConduit creates a new mock instance
func NewMockConduit(ctrl *gomock.Controller) *MockConduit {
	mock := &MockConduit{ctrl: ctrl}
	mock.recorder = &MockConduitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConduit) EXPECT() *MockConduitMockRecorder {
	return m.recorder
}

// Submit mocks base method
func (m *MockConduit) Submit(arg0 interface{}, arg1 ...flow.Identifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Submit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Submit indicates an expected call of Submit
func (mr *MockConduitMockRecorder) Submit(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockConduit)(nil).Submit), varargs...)
}
