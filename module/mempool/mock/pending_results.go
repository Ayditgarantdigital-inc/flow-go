// Code generated by mockery v1.0.0. DO NOT EDIT.

package mempool

import flow "github.com/dapperlabs/flow-go/model/flow"

import mock "github.com/stretchr/testify/mock"

// PendingResults is an autogenerated mock type for the PendingResults type
type PendingResults struct {
	mock.Mock
}

// Add provides a mock function with given fields: result
func (_m *PendingResults) Add(result *flow.PendingResult) bool {
	ret := _m.Called(result)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.PendingResult) bool); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ByID provides a mock function with given fields: resultID
func (_m *PendingResults) ByID(resultID flow.Identifier) (*flow.PendingResult, bool) {
	ret := _m.Called(resultID)

	var r0 *flow.PendingResult
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.PendingResult); ok {
		r0 = rf(resultID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.PendingResult)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(resultID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Has provides a mock function with given fields: resultID
func (_m *PendingResults) Has(resultID flow.Identifier) bool {
	ret := _m.Called(resultID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(resultID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Rem provides a mock function with given fields: resultID
func (_m *PendingResults) Rem(resultID flow.Identifier) bool {
	ret := _m.Called(resultID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(resultID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *PendingResults) Size() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}
