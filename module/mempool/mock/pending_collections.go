// Code generated by mockery v1.0.0. DO NOT EDIT.

package mempool

import (
	flow "github.com/dapperlabs/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	verification "github.com/dapperlabs/flow-go/model/verification"
)

// PendingCollections is an autogenerated mock type for the PendingCollections type
type PendingCollections struct {
	mock.Mock
}

// Add provides a mock function with given fields: pcoll
func (_m *PendingCollections) Add(pcoll *verification.PendingCollection) error {
	ret := _m.Called(pcoll)

	var r0 error
	if rf, ok := ret.Get(0).(func(*verification.PendingCollection) error); ok {
		r0 = rf(pcoll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// All provides a mock function with given fields:
func (_m *PendingCollections) All() []*verification.PendingCollection {
	ret := _m.Called()

	var r0 []*verification.PendingCollection
	if rf, ok := ret.Get(0).(func() []*verification.PendingCollection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*verification.PendingCollection)
		}
	}

	return r0
}

// ByID provides a mock function with given fields: pcollID
func (_m *PendingCollections) ByID(pcollID flow.Identifier) (*verification.PendingCollection, error) {
	ret := _m.Called(pcollID)

	var r0 *verification.PendingCollection
	if rf, ok := ret.Get(0).(func(flow.Identifier) *verification.PendingCollection); ok {
		r0 = rf(pcollID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.PendingCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(pcollID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Has provides a mock function with given fields: pcollID
func (_m *PendingCollections) Has(pcollID flow.Identifier) bool {
	ret := _m.Called(pcollID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(pcollID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Rem provides a mock function with given fields: pcollID
func (_m *PendingCollections) Rem(pcollID flow.Identifier) bool {
	ret := _m.Called(pcollID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(pcollID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
