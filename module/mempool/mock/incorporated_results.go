// Code generated by mockery v1.0.0. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// IncorporatedResults is an autogenerated mock type for the IncorporatedResults type
type IncorporatedResults struct {
	mock.Mock
}

// Add provides a mock function with given fields: result
func (_m *IncorporatedResults) Add(result *flow.IncorporatedResult) bool {
	ret := _m.Called(result)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.IncorporatedResult) bool); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// All provides a mock function with given fields:
func (_m *IncorporatedResults) All() []*flow.IncorporatedResult {
	ret := _m.Called()

	var r0 []*flow.IncorporatedResult
	if rf, ok := ret.Get(0).(func() []*flow.IncorporatedResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.IncorporatedResult)
		}
	}

	return r0
}

// ByResultID provides a mock function with given fields: resultID
func (_m *IncorporatedResults) ByResultID(resultID flow.Identifier) []*flow.IncorporatedResult {
	ret := _m.Called(resultID)

	var r0 []*flow.IncorporatedResult
	if rf, ok := ret.Get(0).(func(flow.Identifier) []*flow.IncorporatedResult); ok {
		r0 = rf(resultID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.IncorporatedResult)
		}
	}

	return r0
}

// Rem provides a mock function with given fields: incorporatedResultID
func (_m *IncorporatedResults) Rem(incorporatedResultID flow.Identifier) bool {
	ret := _m.Called(incorporatedResultID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(incorporatedResultID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *IncorporatedResults) Size() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}
