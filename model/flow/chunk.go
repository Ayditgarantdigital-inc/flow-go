package flow

type ChunkBody struct {
	CollectionIndex uint

	// execution info
	StartState      StateCommitment // start state when starting executing this chunk
	EventCollection Identifier      // Events generated by executing results

	// Computation consumption info
	TotalComputationUsed uint64 // total amount of computation used by running all txs in this chunk
	NumberOfTransactions uint64 // number of transactions inside the collection
}

type Chunk struct {
	ChunkBody

	Index uint64 // chunk index inside the ER (starts from zero)
	// EndState inferred from next chunk or from the ER
	EndState StateCommitment
}

// ID returns a unique id for this entity
func (ch *Chunk) ID() Identifier {
	return MakeID(ch.ChunkBody)
}

// Checksum provides a cryptographic commitment for a chunk content
func (ch *Chunk) Checksum() Identifier {
	return MakeID(ch)
}

type ChunkHeader struct {
	ChunkID     Identifier
	StartState  StateCommitment
	RegisterIDs []RegisterID
}

// ChunkState represents the state registers used by a particular chunk.
type ChunkState struct {
	ChunkID   Identifier
	Registers Ledger
}

// ID returns the unique identifier for the concrete view, which is the ID of
// the chunk the view is for.
func (c *ChunkState) ID() Identifier {
	return c.ChunkID
}

// Checksum returns the checksum of the chunk state.
func (c *ChunkState) Checksum() Identifier {
	return MakeID(c)
}

// Note that this is the basic version of the List, we need to substitute it with something like Merkel tree at some point
type ChunkList []*Chunk

func (cl ChunkList) Fingerprint() Identifier {
	return MerkleRoot(GetIDs(cl)...)
}

func (cl *ChunkList) Insert(ch *Chunk) {
	*cl = append(*cl, ch)
}

func (cl ChunkList) Items() []*Chunk {
	return cl
}

// ByChecksum returns an entity from the list by entity fingerprint
func (cl ChunkList) ByChecksum(cs Identifier) (*Chunk, bool) {
	for _, ch := range cl {
		if ch.Checksum() == cs {
			return ch, true
		}
	}
	return nil, false
}

// ByIndex returns an entity from the list by index
func (cl ChunkList) ByIndex(i uint64) *Chunk {
	return cl[i]
}

// ByIndexWithProof returns an entity from the list by index and proof of membership
func (cl ChunkList) ByIndexWithProof(i uint64) (*Chunk, Proof) {
	return cl[i], nil
}

// Size returns the number of Chunks in the list
func (cl ChunkList) Size() int {
	return len(cl)
}
