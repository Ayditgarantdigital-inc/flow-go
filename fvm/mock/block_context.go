// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	fvm "github.com/dapperlabs/flow-go/fvm"
	flow "github.com/dapperlabs/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// BlockContext is an autogenerated mock type for the BlockContext type
type BlockContext struct {
	mock.Mock
}

// ExecuteScript provides a mock function with given fields: ledger, script, arguments
func (_m *BlockContext) ExecuteScript(ledger fvm.Ledger, script []byte, arguments [][]byte) (*fvm.ScriptResult, error) {
	ret := _m.Called(ledger, script, arguments)

	var r0 *fvm.ScriptResult
	if rf, ok := ret.Get(0).(func(fvm.Ledger, []byte, [][]byte) *fvm.ScriptResult); ok {
		r0 = rf(ledger, script, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fvm.ScriptResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(fvm.Ledger, []byte, [][]byte) error); ok {
		r1 = rf(ledger, script, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteTransaction provides a mock function with given fields: ledger, tx, options
func (_m *BlockContext) ExecuteTransaction(ledger fvm.Ledger, tx *flow.TransactionBody, options ...fvm.TransactionContextOption) (*fvm.TransactionResult, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ledger, tx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *fvm.TransactionResult
	if rf, ok := ret.Get(0).(func(fvm.Ledger, *flow.TransactionBody, ...fvm.TransactionContextOption) *fvm.TransactionResult); ok {
		r0 = rf(ledger, tx, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fvm.TransactionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(fvm.Ledger, *flow.TransactionBody, ...fvm.TransactionContextOption) error); ok {
		r1 = rf(ledger, tx, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ledger, addr
func (_m *BlockContext) GetAccount(ledger fvm.Ledger, addr flow.Address) (*flow.Account, error) {
	ret := _m.Called(ledger, addr)

	var r0 *flow.Account
	if rf, ok := ret.Get(0).(func(fvm.Ledger, flow.Address) *flow.Account); ok {
		r0 = rf(ledger, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(fvm.Ledger, flow.Address) error); ok {
		r1 = rf(ledger, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
