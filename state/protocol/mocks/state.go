// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapperlabs/flow-go/state/protocol (interfaces: State)

// Package mocks is a generated GoMock package.
package mocks

import (
	flow "github.com/dapperlabs/flow-go/model/flow"
	protocol "github.com/dapperlabs/flow-go/state/protocol"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockState is a mock of State interface
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AtBlockID mocks base method
func (m *MockState) AtBlockID(arg0 flow.Identifier) protocol.Snapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtBlockID", arg0)
	ret0, _ := ret[0].(protocol.Snapshot)
	return ret0
}

// AtBlockID indicates an expected call of AtBlockID
func (mr *MockStateMockRecorder) AtBlockID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtBlockID", reflect.TypeOf((*MockState)(nil).AtBlockID), arg0)
}

// AtNumber mocks base method
func (m *MockState) AtNumber(arg0 uint64) protocol.Snapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtNumber", arg0)
	ret0, _ := ret[0].(protocol.Snapshot)
	return ret0
}

// AtNumber indicates an expected call of AtNumber
func (mr *MockStateMockRecorder) AtNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtNumber", reflect.TypeOf((*MockState)(nil).AtNumber), arg0)
}

// Final mocks base method
func (m *MockState) Final() protocol.Snapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Final")
	ret0, _ := ret[0].(protocol.Snapshot)
	return ret0
}

// Final indicates an expected call of Final
func (mr *MockStateMockRecorder) Final() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Final", reflect.TypeOf((*MockState)(nil).Final))
}

// Mutate mocks base method
func (m *MockState) Mutate() protocol.Mutator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mutate")
	ret0, _ := ret[0].(protocol.Mutator)
	return ret0
}

// Mutate indicates an expected call of Mutate
func (mr *MockStateMockRecorder) Mutate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutate", reflect.TypeOf((*MockState)(nil).Mutate))
}
