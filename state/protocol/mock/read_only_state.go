// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import flow "github.com/dapperlabs/flow-go/model/flow"
import mock "github.com/stretchr/testify/mock"
import protocol "github.com/dapperlabs/flow-go/state/protocol"

// ReadOnlyState is an autogenerated mock type for the ReadOnlyState type
type ReadOnlyState struct {
	mock.Mock
}

// AtBlockID provides a mock function with given fields: blockID
func (_m *ReadOnlyState) AtBlockID(blockID flow.Identifier) protocol.Snapshot {
	ret := _m.Called(blockID)

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func(flow.Identifier) protocol.Snapshot); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// AtNumber provides a mock function with given fields: number
func (_m *ReadOnlyState) AtNumber(number uint64) protocol.Snapshot {
	ret := _m.Called(number)

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func(uint64) protocol.Snapshot); ok {
		r0 = rf(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// Final provides a mock function with given fields:
func (_m *ReadOnlyState) Final() protocol.Snapshot {
	ret := _m.Called()

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func() protocol.Snapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}
