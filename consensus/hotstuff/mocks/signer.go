// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/dapperlabs/flow-go/consensus/hotstuff/model"

// Signer is an autogenerated mock type for the Signer type
type Signer struct {
	mock.Mock
}

// CreateProposal provides a mock function with given fields: block
func (_m *Signer) CreateProposal(block *model.Block) (*model.Proposal, error) {
	ret := _m.Called(block)

	var r0 *model.Proposal
	if rf, ok := ret.Get(0).(func(*model.Block) *model.Proposal); ok {
		r0 = rf(block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Proposal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Block) error); ok {
		r1 = rf(block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQC provides a mock function with given fields: votes
func (_m *Signer) CreateQC(votes []*model.Vote) (*model.QuorumCertificate, error) {
	ret := _m.Called(votes)

	var r0 *model.QuorumCertificate
	if rf, ok := ret.Get(0).(func([]*model.Vote) *model.QuorumCertificate); ok {
		r0 = rf(votes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.QuorumCertificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*model.Vote) error); ok {
		r1 = rf(votes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVote provides a mock function with given fields: block
func (_m *Signer) CreateVote(block *model.Block) (*model.Vote, error) {
	ret := _m.Called(block)

	var r0 *model.Vote
	if rf, ok := ret.Get(0).(func(*model.Block) *model.Vote); ok {
		r0 = rf(block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vote)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Block) error); ok {
		r1 = rf(block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyProposal provides a mock function with given fields: proposal
func (_m *Signer) VerifyProposal(proposal *model.Proposal) (bool, error) {
	ret := _m.Called(proposal)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.Proposal) bool); ok {
		r0 = rf(proposal)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Proposal) error); ok {
		r1 = rf(proposal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyQC provides a mock function with given fields: qc
func (_m *Signer) VerifyQC(qc *model.QuorumCertificate) (bool, error) {
	ret := _m.Called(qc)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.QuorumCertificate) bool); ok {
		r0 = rf(qc)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.QuorumCertificate) error); ok {
		r1 = rf(qc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyVote provides a mock function with given fields: vote
func (_m *Signer) VerifyVote(vote *model.Vote) (bool, error) {
	ret := _m.Called(vote)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.Vote) bool); ok {
		r0 = rf(vote)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Vote) error); ok {
		r1 = rf(vote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
