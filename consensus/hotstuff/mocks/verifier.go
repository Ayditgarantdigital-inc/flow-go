// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/dapperlabs/flow-go/consensus/hotstuff/model"

// Verifier is an autogenerated mock type for the Verifier type
type Verifier struct {
	mock.Mock
}

// VerifyProposal provides a mock function with given fields: proposal
func (_m *Verifier) VerifyProposal(proposal *model.Proposal) (bool, error) {
	ret := _m.Called(proposal)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.Proposal) bool); ok {
		r0 = rf(proposal)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Proposal) error); ok {
		r1 = rf(proposal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyQC provides a mock function with given fields: qc
func (_m *Verifier) VerifyQC(qc *model.QuorumCertificate) (bool, error) {
	ret := _m.Called(qc)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.QuorumCertificate) bool); ok {
		r0 = rf(qc)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.QuorumCertificate) error); ok {
		r1 = rf(qc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyVote provides a mock function with given fields: vote
func (_m *Verifier) VerifyVote(vote *model.Vote) (bool, error) {
	ret := _m.Called(vote)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.Vote) bool); ok {
		r0 = rf(vote)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Vote) error); ok {
		r1 = rf(vote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
