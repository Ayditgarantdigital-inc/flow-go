// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapperlabs/flow-go/consensus/hotstuff (interfaces: SigAggregator)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/dapperlabs/flow-go/consensus/hotstuff/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSigAggregator is a mock of SigAggregator interface
type MockSigAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockSigAggregatorMockRecorder
}

// MockSigAggregatorMockRecorder is the mock recorder for MockSigAggregator
type MockSigAggregatorMockRecorder struct {
	mock *MockSigAggregator
}

// NewMockSigAggregator creates a new mock instance
func NewMockSigAggregator(ctrl *gomock.Controller) *MockSigAggregator {
	mock := &MockSigAggregator{ctrl: ctrl}
	mock.recorder = &MockSigAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSigAggregator) EXPECT() *MockSigAggregatorMockRecorder {
	return m.recorder
}

// Aggregate mocks base method
func (m *MockSigAggregator) Aggregate(arg0 *model.Block, arg1 []*model.SingleSignature) (*model.AggregatedSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", arg0, arg1)
	ret0, _ := ret[0].(*model.AggregatedSignature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate
func (mr *MockSigAggregatorMockRecorder) Aggregate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockSigAggregator)(nil).Aggregate), arg0, arg1)
}

// CanReconstruct mocks base method
func (m *MockSigAggregator) CanReconstruct(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanReconstruct", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanReconstruct indicates an expected call of CanReconstruct
func (mr *MockSigAggregatorMockRecorder) CanReconstruct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanReconstruct", reflect.TypeOf((*MockSigAggregator)(nil).CanReconstruct), arg0)
}
