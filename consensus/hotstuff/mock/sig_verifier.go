// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import crypto "github.com/dapperlabs/flow-go/crypto"

import mock "github.com/stretchr/testify/mock"
import model "github.com/dapperlabs/flow-go/consensus/hotstuff/model"

// SigVerifier is an autogenerated mock type for the SigVerifier type
type SigVerifier struct {
	mock.Mock
}

// VerifyRandomBeaconSig provides a mock function with given fields: sigShare, block, signerPubKey
func (_m *SigVerifier) VerifyRandomBeaconSig(sigShare crypto.Signature, block *model.Block, signerPubKey crypto.PublicKey) (bool, error) {
	ret := _m.Called(sigShare, block, signerPubKey)

	var r0 bool
	if rf, ok := ret.Get(0).(func(crypto.Signature, *model.Block, crypto.PublicKey) bool); ok {
		r0 = rf(sigShare, block, signerPubKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(crypto.Signature, *model.Block, crypto.PublicKey) error); ok {
		r1 = rf(sigShare, block, signerPubKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyRandomBeaconThresholdSig provides a mock function with given fields: sig, block, groupPubKey
func (_m *SigVerifier) VerifyRandomBeaconThresholdSig(sig crypto.Signature, block *model.Block, groupPubKey crypto.PublicKey) (bool, error) {
	ret := _m.Called(sig, block, groupPubKey)

	var r0 bool
	if rf, ok := ret.Get(0).(func(crypto.Signature, *model.Block, crypto.PublicKey) bool); ok {
		r0 = rf(sig, block, groupPubKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(crypto.Signature, *model.Block, crypto.PublicKey) error); ok {
		r1 = rf(sig, block, groupPubKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyStakingAggregatedSig provides a mock function with given fields: aggStakingSig, block, signerKeys
func (_m *SigVerifier) VerifyStakingAggregatedSig(aggStakingSig []crypto.Signature, block *model.Block, signerKeys []crypto.PublicKey) (bool, error) {
	ret := _m.Called(aggStakingSig, block, signerKeys)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]crypto.Signature, *model.Block, []crypto.PublicKey) bool); ok {
		r0 = rf(aggStakingSig, block, signerKeys)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]crypto.Signature, *model.Block, []crypto.PublicKey) error); ok {
		r1 = rf(aggStakingSig, block, signerKeys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyStakingSig provides a mock function with given fields: stakingSig, block, signerKey
func (_m *SigVerifier) VerifyStakingSig(stakingSig crypto.Signature, block *model.Block, signerKey crypto.PublicKey) (bool, error) {
	ret := _m.Called(stakingSig, block, signerKey)

	var r0 bool
	if rf, ok := ret.Get(0).(func(crypto.Signature, *model.Block, crypto.PublicKey) bool); ok {
		r0 = rf(stakingSig, block, signerKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(crypto.Signature, *model.Block, crypto.PublicKey) error); ok {
		r1 = rf(stakingSig, block, signerKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
